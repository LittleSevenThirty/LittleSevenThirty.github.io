<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程笔记第四章</title>
      <link href="/2024/10/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
      <url>/2024/10/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-结构化设计（重点）"><a href="#第四章-结构化设计（重点）" class="headerlink" title="第四章 结构化设计（重点）"></a>第四章 结构化设计（重点）</h2><div class="note simple"><p><font color="pink">① 结构化分析与结构化设计的关系</font></p><ul><li>数据流图对软件处理数据的过程进行了建模，可以直接将数据流图映射为结构化软件的体系结构设计</li><li>数据流图和数据字典对各个处理的参数进行了定义，可以从数据流图和数据字典导出各个处理的结构</li><li>可以结合处理&#x2F;加工逻辑说明、状态转换图等内容来设计各个函数的内部处理过程</li><li>从需求的数据模型和数据字典中导出软件系统处理的数据结构以及数据存储</li><li><img src="/image/four1.png" alt="结构化分析与结构化设计的关系"></li></ul></div><div class="note simple"><p><font color="pink">② 模块及模块独立性</font><br>考虑：？</p><ul><li>结构化程序设计中的模块是什么？</li><li>如何评价模块的独立性？</li></ul><p>答：</p><ul><li>结构化程序设计语言提供了函数、宏定义等<font color="red">模块化机制</font>,允许软件人员将复杂的软件功能分解为多个独立的功能模块、降低软件开发的复杂度</li></ul></div><div class="note info simple"><p><font size="3" color="red">内聚</font><br><font color="red">内聚</font>从模块的功能角度出发来度量模块内部各个元素存在的必要性。内聚程度较高的模块应当功能唯一，且模块内部的所有元素对于实现模块功能不可或缺的<br><img src="/image/four2.png" alt="内聚分类"></p><div class="tabs" id="内聚"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="内聚-1"><strong>功能内聚</strong></button><button type="button" class="tab " data-href="内聚-2"><strong>顺序内聚</strong></button><button type="button" class="tab " data-href="内聚-3"><strong>信息内聚</strong></button><button type="button" class="tab " data-href="内聚-4"><strong>通信内聚</strong></button><button type="button" class="tab " data-href="内聚-5"><strong>过程内聚</strong></button><button type="button" class="tab " data-href="内聚-6"><strong>时间内聚</strong></button><button type="button" class="tab " data-href="内聚-7"><strong>逻辑内聚</strong></button><button type="button" class="tab " data-href="内聚-8"><strong>巧合内聚</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="内聚-1"><p><font size="5">功能内聚</font><br>模块内所有元素均属于一个整体，共同完成模块的单一功能，是<font color="red">最高程度</font>的内聚。模块内部各个元素对于模块的单一功能而言是不可或缺的<br><img src="/image/four3.png" alt="功能内聚"></p></div><div class="tab-item-content" id="内聚-2"><p>模块内部封装了业务处理的多个功能步骤。上一个步骤的输出作为下一个步骤的输入，依次执行。<br>顺序内聚一般是多个“动词”的排列，如，查找并打印结果<br>顺序内聚将多个功能步骤封装到了一个模块内，不利于代码的重用<br><img src="/image/four4.png" alt="顺序内聚"></p></div><div class="tab-item-content" id="内聚-3"><p>将共享同一个数据的多个功能封装在一起，并且允许模块根据不同的需求来执行特定的功能，以达到信息隐藏得到目的，则可以认为该模块出现了信息内聚<br><img src="/image/four5.png" alt="alt text"></p></div><div class="tab-item-content" id="内聚-4"><p>如果模块内部封装了一些系列特定步骤顺序相关的元素，并且模块内的所有元素都使用同一个输入数据或产生了同一个输出结果，则认为在模块内存在通信内聚<br><img src="/image/four6.png" alt="alt text"></p></div><div class="tab-item-content" id="内聚-5"><p>如果模块内的处理元素是顺序相关的，即相邻元素之间没有数据传递也必须以特定次序执行，则可以认为该模块存在过程内聚<br><img src="/image/four7.png" alt="alt text"></p></div><div class="tab-item-content" id="内聚-6"><p>如果模块内部包含各个处理元素之间必须在同一段时间内执行，或者处理元素之间允许设置一定的时间限制，则该模块内存在时间内聚<br><img src="/image/four8.png" alt="alt text"></p></div><div class="tab-item-content" id="内聚-7"><p>如果某个模块将多个相关的功能组合在一起，且每个功能的执行由传入模块的参数来决定，则可以认为该模块内存在逻辑内聚<br><img src="/image/four9.png" alt="alt text"></p></div><div class="tab-item-content" id="内聚-8"><p>如果模块内的各个元素没有必要联系，或者即使有联系，也是很松散的，则称该模块内存在巧合内聚或偶然内聚<br><img src="/image/four10.png" alt="alt text"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info simple"><p>一般而言，软件设计人员在进行模块设计时应当使用内聚较高的功能内聚，减少或避免使用内聚度较低的顺序内聚、信息内聚、通信内聚、过程内聚，尽量不要使用时间内聚、逻辑内聚和巧合内聚</p></div><p><font size="3" color="red">耦合</font><br><font color="red">耦合</font>用于评价不同函数模块之间的连接程度<br><img src="/image/four11.png" alt="耦合分类"></p><div class="tabs" id="耦合"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="耦合-1"><strong>非直接耦合</strong></button><button type="button" class="tab " data-href="耦合-2"><strong>数据耦合</strong></button><button type="button" class="tab " data-href="耦合-3"><strong>标记耦合</strong></button><button type="button" class="tab " data-href="耦合-4"><strong>控制耦合</strong></button><button type="button" class="tab " data-href="耦合-5"><strong>外部耦合</strong></button><button type="button" class="tab " data-href="耦合-6"><strong>公共耦合</strong></button><button type="button" class="tab " data-href="耦合-7"><strong>内容耦合</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="耦合-1"><p>模块间没有直接联系，它们之间的联系完全通过主模块或者调用模块来实现的<br>eg: 如下图中，模块A和模块B之间没有任何联系，它们唯一的关系就是被同一个模块调用<br><img src="/image/four12.png" alt="非直接耦合"></p></div><div class="tab-item-content" id="耦合-2"><p>如果模块之间存在参数调用关系，且模块之间通过传值来交换信息，则可以认为调用模块和被调用模块之间存在数据耦合<br><img src="/image/four13.png" alt="数据耦合"></p></div><div class="tab-item-content" id="耦合-3"><p>如果模块之间存在调用关系，且调用过程中引用、地址等方式来进行单向或者双向值传递，则可以认为调用模块和被调用模块之间存在标记耦合<br><img src="/image/four14.png" alt="alt text"></p></div><div class="tab-item-content" id="耦合-4"><p>如果模块之间传递的信息中存在控制信息，即调用模块通过参数、开关来控制被调用模块的内部运行，则可以认为调用模块之间存在控制耦合</p><p>如下图，调用模块通过参数Flag来控制被调用模块内部的多个功能<br><img src="/image/four15.png" alt="alt text"></p></div><div class="tab-item-content" id="耦合-5"><p><font size="8">多个模块通过全局变量进行数据交换和共享</font></p><p>如图,模块A和B通过全局变量交换或共享数据，全局变量不利于程序调试和代码复用，在软件开发中应当尽量避免使用外部耦合<br><img src="/image/four16.png" alt="alt text"></p></div><div class="tab-item-content" id="耦合-6"><p>多个模块之间共享的全局数据为复杂数据类型，如链表、内存块等，则可以认为这些共享数据的模块之间出现了公共耦合<br><img src="/image/four17.png" alt="alt text"></p></div><div class="tab-item-content" id="耦合-7"><p>如果一个模块通过特殊手段直接访问另一个模块的内部数据，或者一个模块通过非正常入口转到另一个模块的内部以及被调用模块通过加注标记提供多个入口时，则可以认为这些模块之间出现了内容耦合<br><img src="/image/four18.png" alt="alt text"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info simple"><p>在进行结构化设计时，软件设计人员应<font color=red>尽量使用</font>非直接耦合、数据耦合和标记耦合，<font color=red>减少或避免使用</font>控制耦合、外部耦合和公共耦合,<font color=red>完全不使用</font>内容耦合</p></div></div><div class="note simple"><p><font size="10">2.3 结构化设计启发式规则</font><br>结构化设计启发式规则是一组指导原则，帮助软件设计人员提高模块的独立性和软件的可维护性有如下一些关键的启发式规则</p><ul><li>改进软件结构以提高模块独立性</li><li>模块规模应该适中，以便于理解和维护</li><li>软件架构的深度、宽度、扇入、扇出应该适中，以保持结构的平衡</li><li>模块的作用域应该在控制区域之内，以确保模块的功能可以被正确预测</li><li>模块的功能应该可以预测，以便于其它模块的调用和集成</li></ul><div class="note info simple"><p>其中</p><ol><li><p>在模块规模应该适中这一板块，经验表明，一个模块的规模不应过大，最好能写在一页纸内，有人从心理学角度研究得知，当一个模块包含的语句数超过30以后，模块的可理解程度迅速下降</p></li><li><p>软件架构的深度、宽度、扇入、扇出应当适中首先：</p><ol><li>深度：表示软件结构中从顶层模块到底层模块的层数</li><li>宽度：表示控制的总分布</li><li>扇出数：指一个模块直接控制下属的模块个数</li><li>扇入数：指一个模块的直接上属模块个数<br>一个好的软件结构的形态准则是：顶部宽度小，中部宽度最大，底部宽度次之；在结构顶部有较高<br>例如：<br><img src="/image/four19.png" alt="alt text"><br><font color=orange>人类的认知过程遵守Miller法则:一个人在任何时候都只能把注意力集中在(5~9)个知识块上</font></li></ol></li><li><p>深度、宽度、扇出和扇入都应当适中</p><ol><li>一个设计良好的典型系统的平均扇出通常是3或4(扇出的上限通常是5~9)</li><li>设计良好的软件结构通常是顶层扇出比较高，中层扇出比较少，底层扇入到公共的实用模块中去(底层模块有高扇入)</li></ol></li></ol></div></div><div class="note simple"><p><font size="10">3. 系统结构设计</font><br>什么是软件的系统结构？<br>软件的系统架构是什么？<br>你觉得如何才能得到软件的架构设计</p><p>一般而言，<font color=red>软件结构包括软件的模块结构和数据结构</font><br>在结构化程序设计中，模块结构就是指软件系统中各个模块或者函数的组成架构，而数据的结构表示数据由哪些部分组成。</p><p><font size="7">3.1 系统结构图</font></p><div class="note simple"><ul><li>系统结构图，又称为层次图，是软件系统结构整体设计的图形化显示。</li><li>在结构化设计阶段，在数据流图的基础上进行设计，将数据流图映射为对应的系统结构图。</li><li>设计者可以直接采用对应的<font color=red>处理名称</font>来命名系统模块。</li><li>为了便于后期跟踪各个模块的调用关系，软件设计人员也可以为系统结构图中各个模块增加编号。<br><img src="/image/four20.png" alt="alt text"></li><li>根据数据流向不同，系统结构图中的模块可以分为以下四种:</li></ul><div class="note simple"><p><img src="/image/four21.png" alt="alt text"><br>传入模块：负责从下属模块中获取数据，并将数据处理以后提交给上级模块。<br>传出模块：负责从上及模块中获取数据，并将数据处理以后传递给下级模块。<br>变换模块：负责对上级模块传入的数据进行处理，再将处理后的数据返回给上级调用模块。<br>协调模块：负责协调管理多个模块，共同完成业务功能，通常，协调模块位于系统结构图的高层。</p></div><ul><li>加入模块的调用逻辑的系统结构图</li><li><img src="/image/four22.png" alt="调用方式"><br>简单调用：上层模块直接调用下层模块。<br>选择调用：上层模块根据业务逻辑判断结果来选择调用下层模块。<br>循环调用: 上层模块根据内部逻辑判断，循环调用下层模块，直至内部循环条件终止。</li></ul></div><p><font size="7">3.2 HIPO图</font></p><div class="note simple"><ul><li>层次图加输入&#x2F;处理&#x2F;输出图(HIPO)是美国IBM公司发明的一种表明软件模块隶属关系和输入、处理、输出的图示工具。<br><img src="/image/four23.png" alt="IPO表">和<img src="/image/four24.png" alt="HIPO图"></li></ul></div><p><font size="7">3.3 面向数据流的设计方法</font></p><div class="note simple"><p>包含数据流图<br><img src="/image/four25.png" alt="数据流图"><br>和系统结构<br><img src="/image/four26.png" alt="系统结构"><br>它们的关系是由数据流图映射为系统结构。</p><p><img src="/image/four27.png" alt="数据流的组成"></p><ul><li>1.变换流<br><img src="/image/four28.png" alt="交换流"></li></ul><div class="note simple"><ul><li>在变换流中，输入数据模块负责从外界获取各种输入信息；</li><li>变换数据模块是变换流的核心，遵循特定的业务规则，对输入系统的数据进行处理；</li><li>设计步骤<ul><li>(1) 复查并精华数据流图<br><img src="/image/four29.png" alt="系统结构图的设计步骤"></li><li>(2) 确定输入流和输出流的边界，孤立出变换中心<br><img src="/image/four30.png" alt="系统结构图的设计步骤2"></li><li>(3) 进行第一级分解，设计顶层和第一层模块<br><img src="/image/four31.png" alt="系统结构图的设计步骤4"></li><li>(4) 进行二级分解，设计中，下层模块<br><img src="/image/four32.png" alt="系统结构图的设计步骤5"></li><li>(5) 软件层次结构精化，如下是精化后的软件层次结构图<br><img src="/image/four33.png" alt="系统结构图的设计步骤6"></li></ul></li></ul></div><ul><li>2.事物流<div class="note simple"><p>事物流是根据状态或处理结果将业务进行<font color=red>分类处理</font>的数据流。<br><img src="/image/four34.png" alt="事物流"></p></div></li></ul></div></div><div class="note simple"><p><font size="10">4. 数据设计</font></p><ul><li>高级程序设计语言的数据类型的作用是什么？</li><li>从结构化分析中，哪些内容可以协助进行数据设计？</li><li>如果你来设计数据，你认为需要注意哪些内容？</li></ul><p><font size="7">4.1 数据元素设计</font></p><div class="note simple"><ul><li>原子类型，例如：int char float double等。</li><li>固定聚合类型，例如：数组，不带指针的结构体。</li><li>可变聚合类型，例如：长度不定的结构体。</li></ul></div><p><font size="7">4.2 数据结构设计</font></p><div class="note simple"><ul><li>随着计算机技术的快速发展，计算机软件除了需要进行数值计算以外，还会遇到大量非数值计算问题，例如：对目标数据进行寻优、查找等。</li><li>为了编写一个“好”的处理，软件设计人员必须分析待处理的数据，以及待处理数之间的关系。<br><img src="/image/four35.png" alt="常见数据结构"></li></ul></div><p><font size="7">4.3 文件格式设计</font></p><div class="note simple"><p>如何保存计算机中处理的结果？以及如何使用原来的处理数据？这就需要考虑文件格式的设计了。<br>如果程序需要持久化的数据较少时，可以采用文件方式来保存数据。</p><p>文件：存储在计算机外部介质上的数据的集合，例如：</p><ul><li>二进制文件</li><li>ASCII文件</li></ul><p>除此之外，根据不同的数据类型和处理需求，还需考虑，例如：</p><ul><li>固定聚合类型如何存储？</li><li>可变聚合类型如何存储？</li><li>如果数据之间存在关系，应当如何存储数据？</li><li>如果涉及到大量格式化数据，应该如何存储？<ul><li>关系数据库</li><li>非关系数据库</li></ul></li></ul></div></div><div class="note simple"><p><font size="10">5. 过程设计</font><br>对<font color=red>各个模块</font>使用的<font color=red>算法</font>或者<font color=red>数据结构</font>进行设计，采用合适的建模工具对模块内容进行准确描述。</p><p>可用于表述模块内部处理规格说明的工具</p><ul><li><font color=red>程序流程图</font></li><li><font color=red>N-S盒图</font></li><li>问题分析图</li><li>过程设计语言</li></ul><p><font size="7"> 程序流程图</font></p><div class="note simple"><p>流程图是对过程、算法、流程的一种图形表示，它对某个问题的定义、分析或解法进行描述，用定义完善的符号来表示操作、数据、流向等概念<br><font color=red>程序流程图</font>也称为程序框图，是一种比较直观、形象地描述过程的控制流程的图形工具，它包含5种基本的控制结构:<font color=red>顺序型、选择型、先判定型循环(While-do)、后判定型循环(do-while)和多分支选择型</font></p><p>如下是流程图的基本符号<br><img src="/image/four36.png" alt="流程图的基本符号"></p><p>如下是流程图的基本控制结构<br><img src="/image/four37.png" alt="流程图的基本控制结构"></p></div><div class="note warning simple"><p>绘制程序流程图时，除了需要遵循基本的绘图规则以外，还需要注意以下事项：</p><ul><li>程序流程图的符号绘制顺序为从上至下，从左至右。</li><li>程序流程图必须只有一个入口、一个出口。</li><li>流程处理有且仅能有唯一的一条出线。</li><li>程序流向符号应尽量避免相互交叉，如果相交请选择绕过方式。</li><li>程序流程图中的流程处理信息应使用规范的动词来表述，避免使用笼统词。</li><li>流程图中的相同符号应大小一致。</li><li>同一路径符号的指示箭头应只有一个。</li><li>如果程序流程图能够一目了然，可省略开始符号和结束符号。</li><li>在选择结构及重复结构中，选择条件或决策条件上标明的文字叙述应该简明清晰，路径上应标识“是”“否”或其他相对性文字指示。</li><li>如果程序流程图中的使用到其他已经定义的子程序，则直接调用即可，无须重复绘制子程序的详细内容。</li></ul></div><div class="note simple"><p>程序流程图的主要优点有:</p><ul><li>采用简单规范的符号，画法简单</li><li>结构清晰，逻辑性强</li><li>便于描述，容易理解</li></ul><p>而缺点是:</p><ul><li>不利于逐步求精的设计</li><li>图中可用箭头随意地对控制进行转移，与结构化程序设计精神相悖</li><li>不易于表示系统中所含的数据结构</li><li>当目标系统较复杂时，流程图会变得很复杂、不清晰</li></ul><p>eg:<br><img src="/image/four38.png" alt="alt text"></p></div><p><font size="7">N-S盒图</font><br>N-S图是由Nassi和Shneiderman提出的，又被称为盒图，是一种符合结构化程序设计原则的图形工具。N-S图的基本符号如图所示<br><img src="/image/four39.png" alt="N-S图的基本符号"></p><div class="note simple"><ul><li>N-S图用类似盒子的矩形以及矩形之间的嵌套来表示语句或语句序列，N-S图内部没有箭头，因此，它所表示的控制流程不能随便进行转移，N-S图的主要特点可以归纳为:<ul><li>不允许随意的控制转移，有利于严格的结构化程序设计</li><li>可以很方便地确定一个特定控制结构的作用域，以及局部数据和全局数据的作用域;</li><li>可以很方便地表示嵌套关系以及模块之间的层次关系</li></ul></li><li>用N-S图表示算法，思路清晰，结构良好，容易设计，因而可有效地提高程序设计的质量和效率</li></ul><p>例如:<br><img src="/image/four40.png" alt="N-S盒图实例"></p></div><p><font size="7">问题分析图(PAD图)</font></p><div class="note simple"><p>PAD图(Problem Analysis Diagram)也叫做问题分析图，是由日本日立公司于1973年发明的，PAD图基于结构化程序设计思想，用二维树形结构的图来表示程序的控制流及逻辑结构。<br>在PAD图中，一条竖线代表一个层次，最左边的竖线是第一层控制结构，随着层次的加深，图形不断地向右展开。PAD图的基本控制符号如下:<br><img src="/image/four41.png" alt="alt text"></p><p>补充:</p><ul><li>PAD图为常用的高级程序设计语言的各种控制语句提供了对应的图形符号，它的主要特点是:<ul><li>PAD图表示的程序结构的执行顺序是自最左边的竖线的上端开始，自上而下，自左向右</li><li>用PAD图表示的程序片段结构清晰，层次分明</li><li>支持自顶向下、逐步求精的设计方法</li><li>只能用于结构化的程序设计</li></ul></li><li>PAD图不仅可以表示程序逻辑，还能表示数据结构</li></ul></div><p><font size="7">过程设计语言</font></p><div class="note simple"><p>结构化语言，又称程序设计语言（PDL）或伪代码，是一种用来以文本形式表示数据和处理过程的设计工具。</p><p>PDL应具备以下特点：</p><p>固定关键字语法：提供清晰的控制结构，并使用关键字标识结构的开始和结束，如if…fi。<br>自然语言的自由语法：用于描述处理特征，增强易用性。<br>数据描述手段：包括简单（如标量、数组）和复杂（如链表、层次结构）数据结构。<br>模块定义与调用技术：提供多种接口描述模式，方便模块的定义和调用。</p></div></div><p><font size="10">6. 设计优化</font></p><div class="note simple"><ul><li>在有效的模块化机制前提下，首先使用最少量的模块实现系统功能：</li><li>在满足信息要求的前提下，尽量使用最简单的数据结构</li><li>在优化设计内容时，优先设计和优化对时间起决定性作用的模块</li><li>首先在不考虑时间因素的前提下开发并精华软件结构</li><li>评估并优化模块的处理过程，降低模块处理的时间复杂度和空间复杂度</li><li>在保证模块功能的情况下，简化条件表达式，优化逻辑处理过程</li><li>尽量使用高级程序设计语言来编写程序</li><li>定位并孤立出软件中占用大量处理器资源的模块，必要时，重新设计或者采用依赖于机器的语言重写上述模块的代码</li></ul></div><p><font size="10">7. 小结</font></p><div class="note simple"><ul><li>软件设计人员可以依据结构化分析阶段完成的数据流图、处理加工逻辑说明、状态转换图和数据模型来开展软件设计工作，实现软件需求到软件设计的映射。</li><li>结构化程序设计模块独立性评价（耦合、内聚）</li><li>数据流图到系统结构图的转换（变换流、事务流）</li><li>数据设计（数据元素设计、数据结构设计、数据存储设计）</li><li>软件模块的处理流程设计（程序流程图）</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 速成</title>
      <link href="/2024/09/20/npm-%E9%80%9F%E6%88%90/"/>
      <url>/2024/09/20/npm-%E9%80%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3><font color=lightpink>后续可能会再次添加新命令</font></h3><p>在此提供文章借鉴链接包括：<br><a href="https://juejin.cn/post/7311142182810959935">https://juejin.cn/post/7311142182810959935</a><br><a href="https://blog.csdn.net/qq_43940789/article/details/131449710">https://blog.csdn.net/qq_43940789/article/details/131449710</a></p><ul><li><a href="https://nodejs.org/zh-cn/download/package-manager">Node.js官方下载地址</a><br>当然Node.js安装默认是最新版本，如果需要安装旧版本，可以到官网下载安装包进行安装。</li><li>[npm 速成课程]</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>npm 是 Node.js 包管理工具，可以用来安装、管理和发布 Node.js 包。本文将介绍 npm 的基本用法，帮助你快速上手 npm, 并不需要学习Node.js的知识。</p><p>npm 全称为Node Package Manager, 是一个命令行工具，用于管理Node.js 项目中的依赖包,它可以自动安装和更新项目中所需的依赖包，并在项目中生成一个package.json文件，记录项目中安装的依赖包及其版本信息.</p><ol><li><p>我们准备一个文件夹（我以npmapp为例），并在该文件夹下Shirft+右键Git bash here打开命令行窗口，并右键在vscode打开此文件夹</p></li><li><p>输入npm -v或者npm –version(完整的单词前面是两个减号)查看npm版本,</p></li><li><p>输入npm help查看npm命令的帮助信息</p></li><li><p>可以输入ctrl+l清屏(其实往上滚轮还存在)，输入npm init 生成package.json文件[ 它会向我们询问package.json文件的一些信息，如项目名称、版本、描述、作者、许可证、关键字、入口文件、仓库地址等,这些可以提前设置，也可以直接回车使用默认值后期使用命令修改 ]，并自动生成默认的package.json文件内容(package.json文件记录了项目中安装的依赖包及其版本信息)</p></li></ol><p>使用npm init -y或者npm init –yes命令可以跳过向我们询问package.json文件的过程，直接生成默认的package.json文件内容。</strong></p><p><strong><font color=orange>本篇文章会使用到的命令：</font></strong></p><div class="note info simple"><p>以下命令书写格式均是基本语法+例子<br><strong>注意：</strong>所有的语法中 ‘&lt;&gt;’ 是必填内容, ‘[]’是可选内容</p></div><h1 id="获取npm命令帮助"><a href="#获取npm命令帮助" class="headerlink" title="获取npm命令帮助"></a>获取npm命令帮助</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm help</span><br><span class="line">npm</span><br></pre></td></tr></table></figure><h1 id="获取npm版本信息"><a href="#获取npm版本信息" class="headerlink" title="获取npm版本信息"></a>获取npm版本信息</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm <span class="literal">-v</span> (or <span class="literal">--version</span>)</span><br></pre></td></tr></table></figure><h1 id="初始化生成package-json文件"><a href="#初始化生成package-json文件" class="headerlink" title="初始化生成package.json文件"></a>初始化生成package.json文件</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm init <span class="literal">-y</span> (or <span class="literal">--yes</span>)</span><br></pre></td></tr></table></figure><div class="note info simple"><p>npm init -y生成的是一个默认package.json文件，如果没有设置默认配置，则所有的信息都是最初的信息</p></div><h1 id="设置默认配置"><a href="#设置默认配置" class="headerlink" title="设置默认配置"></a>设置默认配置</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> &lt;key&gt; &lt;value&gt; [--<span class="type">global</span>]</span><br></pre></td></tr></table></figure><p><font color=skyblue>例如：</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> init<span class="literal">-author-name</span> <span class="string">&quot;YOUR NAME&quot;</span></span><br><span class="line">npm <span class="built_in">set</span> init<span class="literal">-license</span> <span class="string">&quot;MIT&quot;</span></span><br></pre></td></tr></table></figure><p><font color=skyblue>key的其它取值：</font></p><div class="note info simple"><table><thead><tr><th>配置键</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>registry</code></td><td>指定 npm 注册表的 URL。</td><td><code>npm config set registry https://registry.npmjs.org/</code></td></tr><tr><td><code>cache</code></td><td>指定 npm 缓存目录的位置。</td><td><code>npm config set cache /path/to/cache</code></td></tr><tr><td><code>prefix</code></td><td>指定全局安装包的前缀路径。</td><td><code>npm config set prefix /usr/local</code></td></tr><tr><td><code>loglevel</code></td><td>设置日志级别，如 <code>silent</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>verbose</code>, <code>silly</code>。</td><td><code>npm config set loglevel info</code></td></tr><tr><td><code>init-author-name</code></td><td>设置初始化新项目时的默认作者姓名。</td><td><code>npm config set init-author-name &quot;Your Name&quot;</code></td></tr><tr><td><code>init-author-email</code></td><td>设置初始化新项目时的默认作者邮箱。</td><td><code>npm config set init-author-email &quot;you@example.com&quot;</code></td></tr><tr><td><code>init-author-url</code></td><td>设置初始化新项目时的默认作者网址。</td><td><code>npm config set init-author-url &quot;http://yourwebsite.com&quot;</code></td></tr><tr><td><code>init-version</code></td><td>设置初始化新项目时的默认版本号。</td><td><code>npm config set init-version &quot;1.0.0&quot;</code></td></tr><tr><td><code>init-license</code></td><td>设置初始化新项目时的默认许可证。</td><td><code>npm config set init-license &quot;MIT&quot;</code></td></tr><tr><td><code>save-exact</code></td><td>控制是否在 <code>package.json</code> 中保存精确的版本号。</td><td><code>npm config set save-exact true</code></td></tr><tr><td><code>save-prefix</code></td><td>设置保存依赖版本时的前缀，如 <code>^</code> 或 <code>~</code>。</td><td><code>npm config set save-prefix &quot;^&quot;</code></td></tr><tr><td><code>strict-peer-dependencies</code></td><td>控制是否严格检查 peer dependencies。</td><td><code>npm config set strict-peer-dependencies false</code></td></tr><tr><td><code>ignore-scripts</code></td><td>控制是否忽略脚本。</td><td><code>npm config set ignore-scripts true</code></td></tr><tr><td><code>scripts-prepend-node-path</code></td><td>控制是否在运行脚本时将 Node.js 可执行文件的路径添加到 <code>PATH</code> 环境变量中。</td><td><code>npm config set scripts-prepend-node-path warn</code></td></tr><tr><td><code>proxy</code></td><td>设置 HTTP 代理服务器。</td><td><code>npm config set proxy http://proxy.example.com:8080</code></td></tr><tr><td><code>https-proxy</code></td><td>设置 HTTPS 代理服务器。</td><td><code>npm config set https-proxy http://proxy.example.com:8080</code></td></tr><tr><td><code>cafile</code></td><td>指定 CA 文件的路径，用于 HTTPS 请求。</td><td><code>npm config set cafile /path/to/cafile.pem</code></td></tr></tbody></table></div><h1 id="获取默认配置信息"><a href="#获取默认配置信息" class="headerlink" title="获取默认配置信息"></a>获取默认配置信息</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config get &lt;key&gt;</span><br></pre></td></tr></table></figure><p><font color=skyblue>例如：</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config get init<span class="literal">-author-name</span></span><br><span class="line">npm get init<span class="literal">-license</span></span><br></pre></td></tr></table></figure><p><strong><font color=lightpink>key的取值可以参考设置默认配置的key取值</font></strong></p><h1 id="删除默认配置信息"><a href="#删除默认配置信息" class="headerlink" title="删除默认配置信息"></a>删除默认配置信息</h1><p><font color=skyblue>例如：<br>删除默认作者名字</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config delete init<span class="literal">-author-name</span></span><br><span class="line">npm delete init<span class="literal">-license</span></span><br></pre></td></tr></table></figure><p><strong><font color=lightpink>key的取值可以参考设置默认配置的key取值</font></strong></p><h1 id="npm-下载局部模块"><a href="#npm-下载局部模块" class="headerlink" title="npm 下载局部模块"></a>npm 下载局部模块</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install &lt;package<span class="literal">-name</span>&gt; [-<span class="type">s</span> || -<span class="type">save</span>]</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install lodash <span class="literal">--save</span> (or npm install <span class="literal">--save</span> lodash)</span><br><span class="line">npm install moment <span class="literal">--save</span></span><br><span class="line">npm install gulp gulp<span class="literal">-sass</span> <span class="literal">--save-dev</span></span><br></pre></td></tr></table></figure><div class="note warning simple"><p>如果不指明是 -g 或 –global 则都是下载局部模块，即只适用于当前文件夹<br>-s 则指定下载模块后是否更新package.json里的内容</p></div><h1 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install <span class="literal">--production</span></span><br></pre></td></tr></table></figure><div class="note info simple"><ul><li>npm install:<br>默认情况下，这个命令会安装 package.json 文件中列出的所有依赖项，包括开发环境依赖（devDependencies）和生产环境依赖（dependencies）。<br>它适用于开发阶段，因为开发人员通常需要所有类型的依赖来运行测试、构建项目等。</li><li>npm install –production 或者在 .npmrc 文件中设置了 production&#x3D;true：<br>这个命令只会安装 dependencies 中列出的依赖项，而不会安装 devDependencies 中的依赖。<br>它主要用于生产环境部署，当你不需要开发工具或者测试框架等只在开发过程中使用的工具时，使用这个选项可以减少不必要的包安装，从而节省时间和磁盘空间。</li></ul></div><h1 id="卸载本地模块"><a href="#卸载本地模块" class="headerlink" title="卸载本地模块"></a>卸载本地模块</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;package<span class="literal">-name</span>&gt; [-<span class="type">g</span> || --<span class="type">global</span>]||[-<span class="type">s</span> || --<span class="type">save</span>]</span><br></pre></td></tr></table></figure><p><font clore=skyblue>例如：</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm uninstall gulp<span class="literal">-sass</span> <span class="literal">--save-dev</span></span><br><span class="line">npm remove gulp <span class="literal">--save-dev</span></span><br></pre></td></tr></table></figure><h1 id="npm下载指定模块版本"><a href="#npm下载指定模块版本" class="headerlink" title="npm下载指定模块版本"></a>npm下载指定模块版本</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install &lt;package<span class="literal">-name</span>&gt;<span class="selector-tag">@</span>&lt;version&gt;</span><br></pre></td></tr></table></figure><p><font color=skyblue>例如</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install lodash@<span class="number">4.17</span>.<span class="number">3</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>补充：<strong><font color=red>npm下载最新版本</font></strong><br>npm install package-name@latest –save</p><h1 id="更新本地模块内容"><a href="#更新本地模块内容" class="headerlink" title="更新本地模块内容"></a>更新本地模块内容</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm update &lt;package<span class="literal">-name</span>&gt; [-<span class="type">s</span> || --<span class="type">save</span>]</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>注意：npm update会根据package.lock.json包中各模块相互依赖来更新各模块之间的最新版本，基本不会超过主版本号<br>建议：npm install npm-check-updates -g 全局安装npm-check-updates工具，然后使用npm-check-updates -u 更新package.json文件中的模块版本，再使用npm install更新本地模块内容。</p></div><h1 id="下载全局模块"><a href="#下载全局模块" class="headerlink" title="下载全局模块"></a>下载全局模块</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install &lt;package<span class="literal">-name</span>&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p><font color=skyblue>例如：</font></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> nodemon</span><br><span class="line">npm install <span class="literal">-g</span> live<span class="literal">-server</span></span><br></pre></td></tr></table></figure><h1 id="RUN-NODEMON"><a href="#RUN-NODEMON" class="headerlink" title="RUN NODEMON"></a>RUN NODEMON</h1><p>nodemon</p><h1 id="查看全局模块下载位置"><a href="#查看全局模块下载位置" class="headerlink" title="查看全局模块下载位置"></a>查看全局模块下载位置</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm root <span class="literal">-g</span></span><br></pre></td></tr></table></figure><h1 id="删除全局模块"><a href="#删除全局模块" class="headerlink" title="删除全局模块"></a>删除全局模块</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm remove &lt;package<span class="literal">-name</span>&gt; <span class="literal">-g</span></span><br></pre></td></tr></table></figure><h1 id="查看模块列表"><a href="#查看模块列表" class="headerlink" title="查看模块列表"></a>查看模块列表</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm list</span><br><span class="line">npm list <span class="literal">--depth</span> <span class="number">0</span></span><br><span class="line">npm list <span class="literal">--depth</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>注释：后缀添加 –depth number或 –depth&#x3D;number 即可查看层级为number下的所有模块</p></div><h1 id="npm-脚本-存在于package-json文件中"><a href="#npm-脚本-存在于package-json文件中" class="headerlink" title="npm 脚本(存在于package.json文件中)"></a>npm 脚本(存在于package.json文件中)</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;live-server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><div class="note simple"><p>注释：当拥有了package.json文件后，会有一个scripts对象，如上可以在终端中运行 npm run start 来运行脚本中的命令，有些特定脚本可以不用写run<br>npm run 脚本 实际是将脚本后的命令替换掉 npm run 脚本，从而达到简化输入命令的目的</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 速成 </tag>
            
            <tag> 入门 </tag>
            
            <tag> 基础 </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml知识整理</title>
      <link href="/2024/09/20/yaml%E5%B8%B8%E7%94%A8/"/>
      <url>/2024/09/20/yaml%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a><font color=red>Yaml</font></h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font color=orange>概述</font></h2><div class="note simple"><p>yaml是一种标记语言，类似json，但比json简洁，易于阅读和编写。<br>yaml前言是从文件第一行开始的纯文本属性的一部分，它是在Markdown文件中添加元数据的方法之一，是可读的文件级元数据。</p></div><h2 id="语法特色"><a href="#语法特色" class="headerlink" title="语法特色"></a><font color=orange>语法特色</font></h2><h3 id="板块1"><a href="#板块1" class="headerlink" title="板块1"></a><font color=orange>板块1</font></h3><ul><li><strong>YAML支持多行字符串，而JSON不支持</strong><div class="note simple"><p>eg: yaml多行字符串语法：<strong>键: | 值</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">string1:</span> <span class="string">| </span></span><br><span class="line"><span class="string">  &quot;This is a multi-line string \n with some special characters: \t \n \r \f \b</span></span><br><span class="line"><span class="string">  换一行写字符串也是同属于上一行的内容的&quot;</span></span><br></pre></td></tr></table></figure></div></li><li><strong>YANML支持注释，而JSON不支持</strong></li><li><strong>YAML支持数据类型，如整数、浮点数、布尔值、日期、时间、数组、字典等，而JSON只支持字符串、数值、布尔值、数组、字典等数据类型</strong></li></ul><h3 id="板块2-基本语法"><a href="#板块2-基本语法" class="headerlink" title="板块2:基本语法"></a><font color=orange>板块2</font>:基本语法</h3><div class="note simple"><ol><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>不允许使用tab，只允许使用空格, 在不同的编辑器里，tab的宽度不同，导致服务器无法正确识别，最好的是两个空格</li><li>字符串使用双引号，布尔值使用true&#x2F;false,null表示空，整数和浮点数直接写</li><li>缩进的空格不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ol><div class="note warning simple"><p>注意点：</p><ol><li>YAML一般是键值对的形式 键: 值</li><li>键值对的冒号后面一定要有一个空格</li><li>同一个级别不能出现重复的键</li></ol></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="attr">jobid:</span> <span class="number">10086</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;程序员&quot;</span></span><br></pre></td></tr></table></figure><p><strong>YAML 转 JSON</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;程序员&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="板块3-对象和数组"><a href="#板块3-对象和数组" class="headerlink" title="板块3: 对象和数组"></a><font color=orange>板块3</font>: 对象和数组</h3><div class="note simple"><p>YAML 支持以下几种数据类型：</p><ol><li>对象：键值对的集合，使用缩进表示层级关系，又称为映射，对应json数据的属性</li><li>数组：一组有序的值，又称为列表</li><li>纯量：单个的，不可再分的，如字符串，布尔值，数字，</li></ol><p><strong>对象</strong></p><ul><li><strong>对象也是一个键值对，只不过其值也是键值对</strong><br><strong>例</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">little-seven-thirty的个人博客</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">个人博客</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">little-seven-thirty.cc</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>YAML 转 JSON</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;little-seven-thirty的个人博客&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;个人博客&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;little-seven-thirty.cc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><ul><li><p><strong>数组写法1： 数组元素用 ‘- ‘ 表示，(要有空格)</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python开发</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vue</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组写法2: 数组元素使用 ‘[]’ 包裹起来</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">job:</span> [<span class="string">python开发</span>, <span class="string">前端</span>, <span class="string">vue</span>]</span><br></pre></td></tr></table></figure></li></ul><p><strong>YAML 转 JSON</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;python开发&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;前端&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="板块4-锚点和引用"><a href="#板块4-锚点和引用" class="headerlink" title="板块4: 锚点和引用"></a><font color=orange>板块4</font>: 锚点和引用</h3><div class="note simple"><p><strong>重复的内容可以使用&amp;定义成锚点，使用*引用锚点<br>写法如下：<br>锚点: &amp;锚点别名 值<br>引用: *描点别名</strong></p><p><strong>例</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server4:</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="string">&amp;ip</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server5:</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="meta">*ip</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server6:</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="meta">*ip</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><p><strong>特别的</strong></p><div class="tabs" id="t"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t-1">T 1</button><button type="button" class="tab " data-href="t-2">T 2</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t-1"><div class="note simple"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">common:</span> <span class="string">&amp;common</span> </span><br><span class="line">  <span class="attr">register:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">register</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">中国</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">yinyong:</span> <span class="meta">*common</span></span><br><span class="line">  <span class="attr">other:</span> <span class="string">jiushicyf</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">common<span class="punctuation">:</span> &amp;common </span><br><span class="line">  register<span class="punctuation">:</span> this is a register</span><br><span class="line">  ip<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  address<span class="punctuation">:</span> 中国</span><br><span class="line"> </span><br><span class="line">person<span class="punctuation">:</span></span><br><span class="line">  yinyong<span class="punctuation">:</span> *common</span><br><span class="line">  other<span class="punctuation">:</span> sbjiushicyf</span><br></pre></td></tr></table></figure></div></div><div class="tab-item-content" id="t-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 嵌入式</span></span><br><span class="line"><span class="attr">common:</span> <span class="string">&amp;common</span> </span><br><span class="line">  <span class="attr">register:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">register</span></span><br><span class="line">  <span class="attr">ip:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">中国</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*common</span></span><br><span class="line">  <span class="attr">other:</span> <span class="string">sbjiushicyf</span></span><br></pre></td></tr></table></figure><p>转JSON</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;common&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;register&quot;</span><span class="punctuation">:</span> <span class="string">&quot;this is a register&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;person&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;register&quot;</span><span class="punctuation">:</span> <span class="string">&quot;this is a register&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;other&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sbjiushicyf&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签外挂</title>
      <link href="/2024/09/04/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/"/>
      <url>/2024/09/04/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/</url>
      
        <content type="html"><![CDATA[<h2 id="不定时更新…"><a href="#不定时更新…" class="headerlink" title="不定时更新…"></a><font color=red>不定时更新…</font></h2><blockquote><p><strong>文章来源：</strong><br>作者: Jerry<br>链接: <a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a><br>來源: Butterfly</p></blockquote><blockquote><p><strong>作者说:</strong></p><ul><li><strong>标签外挂是Hexo独有的功能</strong>,并不是标准的Markdown格式<br>以下写法,只适用于Butterfly主题,用在其他主题上不会有效果,甚至可能会报错,使用前请留意</li><li>标签外挂虽然能为主体带来一些额外的功能和UI方面的强化,但是,标签外挂也有明显的限制,使用时&gt;请留意</li></ul></blockquote><p><a name="note-bootstrap-callout"></a></p><h2 id="1-Note-Bootstrap-Callout"><a href="#1-Note-Bootstrap-Callout" class="headerlink" title="1 Note(Bootstrap Callout)"></a><a href="#note-bootstrap-callout">1 Note(Bootstrap Callout)</a></h2><div class="tabs" id="notesetting"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="notesetting-1">通用设置</button><button type="button" class="tab " data-href="notesetting-2">用法1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="notesetting-1"></div><div class="tab-item-content" id="notesetting-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io)</span><br><span class="line">&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">名称</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同标识有不同的颜色<br>(default&#x2F;primary&#x2F;success&#x2F;info&#x2F;warning&#x2F;danger)</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】不显示icon</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的style<br>(simple&#x2F;modern&#x2F;flat&#x2F;disabled)</td></tr></tbody></table><div class="note simple"><p>style值为simple</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note dander simple %&#125;</span><br><span class="line">danger 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示标签</p></div><div class="note default simple"><p>default 提示标签</p></div><div class="note primary simple"><p>primary 提示标签</p></div><div class="note success simple"><p>success 提示标签</p></div><div class="note info simple"><p>info 提示标签</p></div><div class="note warning simple"><p>warning 提示标签</p></div><div class="note danger simple"><p>danger 提示标签</p></div><hr><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note dander modern %&#125;</span><br><span class="line">danger 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note modern"><p>默认 提示标签</p></div><div class="note default modern"><p>default 提示标签</p></div><div class="note primary modern"><p>primary 提示标签</p></div><div class="note success modern"><p>success 提示标签</p></div><div class="note info modern"><p>info 提示标签</p></div><div class="note warning modern"><p>warning 提示标签</p></div><div class="note dander modern"><p>danger 提示标签</p></div><hr><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note dander flat %&#125;</span><br><span class="line">danger 提示标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默认 提示标签</p></div><div class="note default flat"><p>default 提示标签</p></div><div class="note primary flat"><p>primary 提示标签</p></div><div class="note success flat"><p>success 提示标签</p></div><div class="note info flat"><p>info 提示标签</p></div><div class="note warning flat"><p>warning 提示标签</p></div><div class="note dander flat"><p>danger 提示标签</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><p><strong><a name="tag-hide">如果想把一些文字、内容隐藏起来，并提供按钮让用户点击显示，可以使用这个外挂标签</a></strong></p><h2 id="2-tag-hide"><a href="#2-tag-hide" class="headerlink" title="2 tag-hide"></a><a href="#tag-hide">2 tag-hide</a></h2><div class="tabs" id="tag-hide"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tag-hide-1">Inline()</button><button type="button" class="tab " data-href="tag-hide-2">Block()</button><button type="button" class="tab " data-href="tag-hide-3">Toggle()</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><mark class="hl-label orange">inline</mark> 在文本里面添加隐藏内容，只限文字<br><br><br>(content不能包含英文逗号，可用<mark class="hl-label orange">&amp;sbquo</mark> )</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法：&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li>content:文本内容</li><li>display:按钮显示的文字（可选）</li><li>bg:按钮的背景颜色</li><li>color:按钮文字的颜色（可选）</li></ul><div class="note simple"><p>Demo</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">哪个英文字母最酷?&#123;% hideInline 因为西装裤(c装酷),查看答案,#ff7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人?&#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷?<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #ff7242;color: #fff">查看答案<br>  </button><span class="hide-content">因为西装裤(c装酷)</span></span></p><p>门里站着一个人?<span class="hide-inline"><button type="button" class="hide-button" style="">Click<br>  </button><span class="hide-content">闪</span></span></p></div><div class="tab-item-content" id="tag-hide-2"><p><mark class="hl-label origin">block</mark> 创建独立的block隐藏内容，可以隐藏内容，包括图片，代码等等<br>相比较于inline的只能隐藏文字，提高了些上限和使用限制<br></p><p>(display不能包含英文逗号，可用<mark class="hl-label origin">&sbquo;</mark> )</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content:文本内容</li><li>diplay:按钮显示文字（可选）</li><li>bg:按钮的背景颜色（可选）</li><li>color:按钮文字的颜色（可选）</li></ul><div class="note simple"><p>Demo</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% note %&#125;Demo&#123;% endnote %&#125;</span><br><span class="line">&#123;% hideBlock 查看答案%&#125;</span><br><span class="line">傻子，怎么可能有答案呢?</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案呢?</p></div></div></div><div class="tab-item-content" id="tag-hide-3"><div class="note simple"><p>2.3.0以上支持</p></div><p>如果想要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开</p><p>(display不能包含逗号，可用<mark class="hl-label origin">&sbquo;</mark> )</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>语法：<span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>Demo</p></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客更目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客更目录里</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h3 id="移植于next的标签外挂语法"><a href="#移植于next的标签外挂语法" class="headerlink" title="移植于next的标签外挂语法"></a><a name="tabs">移植于next的标签外挂语法</a></h3><h2 id="3-Tabs"><a href="#3-Tabs" class="headerlink" title="3 Tabs"></a><a href="#tabs">3 Tabs</a></h2><p><strong>使用方法</strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique<span class="emphasis">_name,[index] %&#125;</span></span><br><span class="line"><span class="emphasis">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span><br><span class="line"><span class="emphasis">Any content (support inline tags too).</span></span><br><span class="line"><span class="emphasis">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="emphasis">&#123;% endtabs %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">// 定义一个标签外挂块，使用 &#123;% tabs %&#125; 和 &#123;% endtabs %&#125; 包裹</span></span><br><span class="line"><span class="emphasis">// Unique_</span>name 是标签的唯一标识符，[index] 是可选参数，用于指定默认显示的标签索引</span><br><span class="line">// 每个标签的内容使用 &lt;!-- tab --&gt; 和 &lt;!-- endtab --&gt; 包裹</span><br><span class="line">// [Tab caption] 是标签的标题，[@icon] 是可选的图标标识符</span><br><span class="line">// 标签内容支持内联标签</span><br><span class="line"></span><br><span class="line">Unique name     : Unique name of tabs block tag without comma.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>Will be used in #id&#x27;s as prefix for each tab with their index numbers.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>If there are whitespaces in name,for generate #id all whitespaces will replaced Only for current url of post/page must be unique!</span><br><span class="line">[index]         : Index number of active tab.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>If not caption specified,unique name with tab index suffix will be used as capt Optional parameter.</span><br><span class="line">[Tab caption]   : Caption of current tab.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>If not caption specified,unique name with tab index suffix will be used as caption<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>If not caption specified,but specified icon,caption will empty.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>Optional parameter.</span><br><span class="line">[@icon]         : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab Optional parameter.</span><br><span class="line"></span><br><span class="line">Unique name     : 标签块的唯一名称，不带逗号。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>将用作每个标签的 #id 前缀，并带有它们的索引号。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>如果名称中有空格，生成 #id 时所有空格将被替换。仅在当前文章/页面的 URL 中必须是唯一的！</span><br><span class="line">[index]         : 活动标签的索引号。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>如果没有指定标题，唯一名称加上标签索引后缀将用作标题。可选参数。</span><br><span class="line">[Tab caption]   : 当前标签的标题。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>如果没有指定标题，唯一名称加上标签索引后缀将用作标题。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>如果没有指定标题，但指定了图标，标题将为空。可选参数。</span><br><span class="line">[@icon]         : FontAwesome 图标名称（全名，例如 &#x27;fas fa-font&#x27;）。<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>可以指定有或没有空格；例如 &#x27;Tab caption @icon&#x27; 类似于 &#x27;Tab&#x27;。可选参数。</span><br></pre></td></tr></table></figure><div class="note default simple"><p>Demo1- 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test_one"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test_one-1">test_one 1</button><button type="button" class="tab " data-href="test_one-2">test_one 2</button><button type="button" class="tab " data-href="test_one-3">test_one 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test_one-1"><p>this is tab1</p></div><div class="tab-item-content" id="test_one-2"><p>this is tab2</p></div><div class="tab-item-content" id="test_one-3"><p>this is tab3</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><div class="note default simple"><p>Demo4- 自定义Tab名+只有icon + icon和Tab名</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标，没有tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab  炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="testlast"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="testlast-1">第一个Tab</button><button type="button" class="tab " data-href="testlast-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="testlast-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="testlast-1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="testlast-2"><p><strong>只有图标，没有tab名字</strong></p></div><div class="tab-item-content" id="testlast-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Important </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="/2024/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="不定时更新…"><a href="#不定时更新…" class="headerlink" title="不定时更新…"></a><font color=red>不定时更新…</font></h2><p>课程主要内容</p><ul><li>计算机网络</li><li>应用层</li><li>传输层</li><li>网络层：数据平面</li><li>网络层：控制平面</li><li>数据链路层和局域网</li><li>网络安全</li><li>无线和移动网络</li><li>多媒体网络</li><li>网络管理</li></ul><p>第1章：概论<br><font color=red>目标：</font></p><ul><li>了解基本术语和概念</li><li>掌握网络的基本原理</li><li>为后续章节更深入的学习打下基础</li><li>方法：<ul><li>以Internet为例子</li></ul></li></ul><p><font color=red>提纲：</font></p><ul><li>什么是Internet？</li><li>什么是协议？</li><li>网络边缘</li><li>接入网、物理媒体</li><li>网络核心：分组交换、线路交换</li><li>Internet&#x2F;ISP结构</li><li>性能：丢包、延时、吞吐量</li><li>协议层次、服务模型</li><li>历史</li></ul><p>1.2 因特网概述<br>  1 网络、互连网（互联网）和因特网<br>  2 因特网发展的三个阶段<br>  3 因特网的标准化工作<br>  4 因特网的组成</p><p>1 网络、互连网（互联网）和因特网</p><ul><li>网络(Network)由若干<font color=red>结点</font>(Node)和连接这些结点的<font color=red>链路</font>(Link)组成</li><li>多个网络可以通过路由器互连起来，这样就得到一个覆盖范围更大的网络，即互联网（或互连网），所以互联网是“<font color=red>网络的网络</font>(Network of Networks”</li><li>因特网(Internet)是世界上最大的互连网络<img src="/image/computer_internet1.jpg"></li></ul><blockquote><ul><li><strong><font color=red>注意：internet和Internet的区别</font></strong><br>internet(互联网或互连网)是一个通用名词，它泛指多个计算机网络互连而成的网络，在这些网络之间的通信协议可以是任意的<br>Internet(因特网)是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用TCP&#x2F;IP协议族作为通信规则，其前身是美国的APPANET</li></ul></blockquote><p>2 因特网发展的三个阶段</p><table><thead><tr><th align="center">从单个网络ARPANET向互联网发展</th><th align="center">逐步建成三级结构的因特网</th><th align="center">逐步形成了多层次ISP结构的因特网</th></tr></thead><tbody><tr><td align="center">1969年，第一个分组交换网<br><font color=red>ARPANET</font></td><td align="center">1985年,NSF围绕六个大型计算机中心<br>建立<font color=red>NSFNET</font></td><td align="center">1993年，NSFNET逐渐被若干个商用因特网主干网替代；政府机构不再负责因特网运营，让各种<font color=red>因特网服务提供者ISP来运营</font></td></tr><tr><td align="center">略</td><td align="center">略</td><td align="center">1994年，<font color=red>万维网WWW技术促使因特网迅猛发展</font></td></tr><tr><td align="center">1983年,<font color=red>TCP&#x2F;IP协议</font>成为ARPANET的标准协议</td><td align="center">略</td><td align="center">1995年,NSFNET停止运作，<font>英特网彻底商业化</font></td></tr></tbody></table><br><ul><li><strong>因特网服务提供者<font color=red>ISP</font>(Internet Service Provider)</strong></li><li><strong>基于ISP的三层结构的因特网</strong><img src="https://img-blog.csdnimg.cn/20210324090557828.png"></li></ul><p>3 因特网的标准化工作</p><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用</li><li>因特网在指定其标准上的一个很大的特点是<font color=red>面向公众</font><ul><li>因特网所有的<font color=red>RFC</font>(Request For Comments)技术文档都可从因特网上免费下载;(<a href="http://www.ietf.org/rfc.html">http://www.ietf.org/rfc.html</a>)</li><li>任何人都可以随时用电子邮件发表对某个文档的意见或建议</li></ul></li><li><font color=red>因特网协会ISOC</font>是一个国际性组织，它负责对因特网进行全面管理，以及在全世界范围内促进其发展和使用。<ul><li>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</li><li>因特网工程IETF，负责研究中短期工程问题，主要针对协议的开发和标准化</li><li>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题</li></ul></li><li>制定英特网的正是标准要经过以下四个阶段<br>(1) 因特网草案（在这个阶段还不是RFC文档）<br>(2) 建议标准（从这个阶段开始就称为RFC文档）<br>(3) 草案标准<br>(4) 因特网标准</li></ul><p>4 因特网的组成</p><ul><li>边缘部分<ul><li>由所有连接在因特网上的<font color=red>主机</font>组成，这部分是<font color=red>用户直接使用</font>的，用来进行<font color=red>通信</font>(传送数据、音频或视频)和<font color=red>资源共享</font></li></ul></li><li>核心部分<ul><li>由<font color=red>大量网络</font>和连接这些网络的<font color=red>路由器</font>组成，这部分是<font color=red>为边缘部分提供服务的</font>(提供连通性和交换)<img src="https://img-blog.csdnimg.cn/20200210202340913.png"></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程笔记</title>
      <link href="/2024/08/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="不定时更新…"><a href="#不定时更新…" class="headerlink" title="不定时更新…"></a><font color=red>不定时更新…</font></h2><blockquote><p>老师教导我们 “一个完整的软件的诞生不单单只是写代码，也不仅靠程序员。个人技术固然重要，但放在整个软件工程中也显得微不足道”</p></blockquote><blockquote><p>有两种人 “一种是遵守软件工程开发规则的，我们称之为工程师；一种是不遵守软件工程开发规则的，我们称之为码农。”</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80">第一部分 软件工程基础</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95">第二部分 结构化方法</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95">第三部分 面向对象方法</a></li><li><a href="#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E5%8F%8A%E7%AE%A1%E7%90%86">第四部分 软件过程及管理</a></li><li><a href="#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91">第五部分 现代软件开发</a></li></ul><h2 id="第一部分-软件工程基础"><a href="#第一部分-软件工程基础" class="headerlink" title="第一部分 软件工程基础"></a>第一部分 软件工程基础</h2><ul><li><h3 id="第1章-软件发展史及软件工程"><a href="#第1章-软件发展史及软件工程" class="headerlink" title="第1章 软件发展史及软件工程"></a>第1章 软件发展史及软件工程</h3></li><li><h3 id="第2章-软件生命周期"><a href="#第2章-软件生命周期" class="headerlink" title="第2章 软件生命周期"></a>第2章 软件生命周期</h3></li></ul><h2 id="第一章-软件发展史及软件工程"><a href="#第一章-软件发展史及软件工程" class="headerlink" title="第一章 软件发展史及软件工程"></a>第一章 软件发展史及软件工程</h2><div class="note simple"><ul><li>软件工程的历史背景和基本概念是理解软件工程的基础。本章将介绍软件的发展历史、定义、特点、软件危机、软件工程的定义以及软件开发方法。</li></ul></div><div class="tabs" id="第1章-软件发展史及软件工程"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="第1章-软件发展史及软件工程-1"><strong>1.1 软件的发展历史</strong></button><button type="button" class="tab " data-href="第1章-软件发展史及软件工程-2"><strong>1.2 软件的定义与特点</strong></button><button type="button" class="tab " data-href="第1章-软件发展史及软件工程-3"><strong>1.3 软件危机</strong></button><button type="button" class="tab " data-href="第1章-软件发展史及软件工程-4"><strong>1.4 软件工程</strong></button><button type="button" class="tab " data-href="第1章-软件发展史及软件工程-5"><strong>1.5 软件开发方法</strong></button><button type="button" class="tab " data-href="第1章-软件发展史及软件工程-6"><strong>1.6 软件工程知识体系</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="第1章-软件发展史及软件工程-1"><p><strong>1.1 软件的发展历史</strong></p><ul><li>第一阶段：程序的使用者即是程序的编写者。</li><li>第二阶段：允许多用户同时使用计算机的操作系统以及通过计算机进行实时控制的系统。小的软件作坊开始出现，开发人员可以有组织地完成一些小型软件产品的开发。</li><li>第三阶段：计算机由单一大型机器走向分布式，由多个分散的计算机协同完成处理任务。</li><li>第四阶段：计算机计算能力飞速发展，桌面系统、面向对象技术、专家系统、人工智能、并行计算等开始出现。</li></ul></div><div class="tab-item-content" id="第1章-软件发展史及软件工程-2"><p><strong>1.2 软件的定义与特点</strong></p><center><strong><font color=red>软件 ≠ 程序</font></strong></center>* 计算机软件是由专业人员开发并长期维护的软件产品。<br>* 软件 = <font color=red>程序 + 相关数据 + 说明文档</font><br>  - 程序：计算机可以接受的一系列指令，运行时可以提供所要求的功能和性能。<br>  - 数据：使得程序能够适当地操作信息的数据结构。<br>  - 文档：描述程序的研制过程、方法和使用的图文资料。<ul><li><strong>特点：（略）</strong></li></ul></div><div class="tab-item-content" id="第1章-软件发展史及软件工程-3"><p><strong>1.3 软件危机</strong></p><ul><li><strong><font color=red>1968年，北大西洋公约组织的计算科学家在联邦德国加米实施召开的国际学术会议上，第一次提出了“软件危机”</font></strong></li><li><h5 id="软件危机的表现"><a href="#软件危机的表现" class="headerlink" title="软件危机的表现"></a>软件危机的表现</h5><ul><li>开发出来的软件产品不能完全满足用户要求，即软件产品的功能或特性与需求不符。</li><li>软件的开发进度、成本估算不准确。</li><li>软件产品质量难以得到保障，系统功能难以发挥。</li><li>软件开发生产率的提高赶不上硬件的发展和人们需求的增长。</li><li>相对硬件而言，软件的成本不断提高。</li><li>软件文档资料不完备，并存在文档内容和软件产品不符合的情况，软件维护困难。</li></ul></li><li><h5 id="软件危机的原因"><a href="#软件危机的原因" class="headerlink" title="软件危机的原因"></a>软件危机的原因</h5><ul><li>人们对产品认识的不足以及对软件开发的内在规律理解的偏差是软件危机产生的原因。</li></ul></li><li><h5 id="软件危机的启示"><a href="#软件危机的启示" class="headerlink" title="软件危机的启示"></a>软件危机的启示</h5><ul><li>应该更加深刻的认识到软件的特性以及<strong><font color=red>软件开发的内在规律</font></strong>。</li></ul></li></ul></div><div class="tab-item-content" id="第1章-软件发展史及软件工程-4"><p><strong>1.4 软件工程</strong></p><ul><li><strong>1968年，在西北大西洋公约组织举行的一次学术会议上，首次提出了<font color=red>软件工程</font>的概念</strong></li><li>IEEE(Institute of Electrical and Electronics Engineers)对软件工程定义：软件工程是将系统的、规范的、可度量化的工程化方法应用于软件开发、运行和维护的全过程及上述方法的研究。</li></ul></div><div class="tab-item-content" id="第1章-软件发展史及软件工程-5"><p><strong>1.5 软件开发方法</strong><br><strong>（略）</strong></p></div><div class="tab-item-content" id="第1章-软件发展史及软件工程-6"><p><strong>1.6 软件工程知识体系</strong></p><ul><li>IEEE在2014年发布的《软件工程知识体系指南》中将软件工程知识体系划分为以下15个知识领域：<ol><li><font color=red>软件需求</font></li><li><font color=red>软件设计</font></li><li><font color=red>软件构建</font></li><li><font color=red>软件测试</font></li><li><font color=red>软件维护</font></li><li>软件配置管理</li><li>软件工程管理</li><li>软件工程过程</li><li><font color=red>软件工程模型和方法</font></li><li>软件质量</li><li>软件工程职业实践</li><li>软件工程经济学</li><li>计算基础</li><li>数学基础</li><li>工程基础</li></ol></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><h3 id="第一章主要介绍了软件工程的历史背景和基本概念，为后续章节的学习奠定了基础。通过本章的学习，我们对软件工程有了一个全面的认识，接下来将深入探讨各个具体领域的知识和方法"><a href="#第一章主要介绍了软件工程的历史背景和基本概念，为后续章节的学习奠定了基础。通过本章的学习，我们对软件工程有了一个全面的认识，接下来将深入探讨各个具体领域的知识和方法" class="headerlink" title="第一章主要介绍了软件工程的历史背景和基本概念，为后续章节的学习奠定了基础。通过本章的学习，我们对软件工程有了一个全面的认识，接下来将深入探讨各个具体领域的知识和方法"></a>第一章主要介绍了软件工程的历史背景和基本概念，为后续章节的学习奠定了基础。通过本章的学习，我们对软件工程有了一个全面的认识，接下来将深入探讨各个具体领域的知识和方法</h3></li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><ul><li><h3 id="从第二章开始，我们将进入软件工程的实质性内容，通过系统学习和实践，逐步掌握软件开发的全过程和管理技巧。希望这些笔记能为大家提供一个清晰的学习路线和使用的知识框架"><a href="#从第二章开始，我们将进入软件工程的实质性内容，通过系统学习和实践，逐步掌握软件开发的全过程和管理技巧。希望这些笔记能为大家提供一个清晰的学习路线和使用的知识框架" class="headerlink" title="从第二章开始，我们将进入软件工程的实质性内容，通过系统学习和实践，逐步掌握软件开发的全过程和管理技巧。希望这些笔记能为大家提供一个清晰的学习路线和使用的知识框架"></a>从第二章开始，我们将进入软件工程的实质性内容，通过系统学习和实践，逐步掌握软件开发的全过程和管理技巧。希望这些笔记能为大家提供一个清晰的学习路线和使用的知识框架</h3></li></ul><h2 id="第二章-软件生命周期"><a href="#第二章-软件生命周期" class="headerlink" title="第二章 软件生命周期"></a>第二章 软件生命周期</h2><div class="note simple"><ul><li>软件过程：软件的诞生和生命周期是一个过程，总体我们叫它软件过程</li><li>软件过程是为了开发出软件产品呢，或者是为了完成软件工程项目而需要完成的有关软件工程的活动，每一项活动还可以分为一系列的工程任务</li></ul></div><div class="tabs" id="第2章-软件生命周期"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="第2章-软件生命周期-1"><strong>2.0 软件过程（补充）</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-2"><strong>2.1 项目构想和立项 </strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-3"><strong>2.2 可行性分析</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-4"><strong>2.3 项目开发计划</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-5"><strong>2.4 需求分析</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-6"><strong>2.5 软件设计</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-7"><strong>2.6 软件实现</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-8"><strong>2.7 软件测试</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-9"><strong>2.8 软件维护</strong></button><button type="button" class="tab " data-href="第2章-软件生命周期-10"><strong>总结</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="第2章-软件生命周期-1"><p><strong>2.0 软件过程</strong></p><ul><li>软件过程：主要指软件的开发过程，关注的是软件开发过程所应用的方法论、活动集合和活动顺序。</li><li>软件生命周期：指软件从定义、开发、使用和维护，直到被废弃的整个时期，关注于软件从诞生到消亡的生命过程。</li><li>另外一个角度而言，可以认为软件过程等同于软件生命周期，也就是说软件过程模型等同于软件开发模型，也等同于软件生命周期模型。</li></ul><p><strong>2.0.1 软件生命周期</strong></p><ul><li>软件产品的生命周期：从设计该产品的<font color=red>构想开始</font>,到软件需求的确定、软件设计、软件实现、产品测试与验收、投入使用以及产品的不断更新、到该产品最终<font color=red>被市场淘汰</font>的全过程</li><li>从时间的角度，将软件的开发和维护的复杂过程分解为了若干个阶段，每个阶段都完成特定的相对独立的任务</li></ul><p><strong>2.0.2 传统软件生命周期的各个阶段</strong></p><ul><li>在传统软件工程中，生命周期一般可分为6个阶段</li><li><mark class="hl-label default">可行性研究</mark> <strong>——》</strong><mark class="hl-label default">需求分析</mark> <strong>——》</strong><mark class="hl-label default">软件设计</mark>  <strong>——》</strong><mark class="hl-label default">程序编码</mark> <strong>——》</strong><mark class="hl-label default">软件测试</mark>  <strong>——》</strong><mark class="hl-label default">运行维护</mark></li></ul><p><strong>2.0.3 软件开发过程模型</strong></p><div class="tabs" id="软件开发过程模型"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="软件开发过程模型-1"><strong><font color=red>瀑布模型</font></strong></button><button type="button" class="tab " data-href="软件开发过程模型-2"><strong>演化模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-3"><strong>快速原型模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-4"><strong>增量模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-5"><strong>螺旋模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-6"><strong><font color=red>喷泉模型</font></strong></button><button type="button" class="tab " data-href="软件开发过程模型-7"><strong>基于构建的开发模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-8"><strong>统一过程</strong></button><button type="button" class="tab " data-href="软件开发过程模型-9"><strong>能力成熟模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-10"><strong>敏捷软件模型</strong></button><button type="button" class="tab " data-href="软件开发过程模型-11"><strong>形式化方法</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="软件开发过程模型-1"><p><strong>概述：</strong></p><ul><li>瀑布模型具有不可回溯性，是一种线性开发模型</li><li>步骤：<mark class="hl-label default">需求收集</mark> <strong>&#x3D;&#x3D;》</strong><mark class="hl-label default">需求分析</mark> <strong>&#x3D;&#x3D;》</strong><mark class="hl-label default">软件设计</mark> <strong>&#x3D;&#x3D;》</strong><mark class="hl-label default">程序编码</mark> <strong>&#x3D;&#x3D;》</strong><mark class="hl-label default">测试</mark> <strong>&#x3D;&#x3D;》</strong><mark class="hl-label default">运行与维护</mark> </li><li>开发人员必须等前一阶段的任务结束，才能进行下一阶段的任务，并且，前一阶段的输出就是下一阶段的输入</li><li>由于其不可回溯性导致如果在软件生命周期的后期发现并要改正前期的错误，需要付出很高的代价</li></ul><p><strong>优点：</strong></p><ul><li>阶段性</li><li>顺序性</li><li>正确性</li><li>依赖性</li></ul><p><strong>缺点：</strong></p><ul><li>在软件开发初期，明确用户的需求难度太大，不太现实</li><li>具有延后性，且风险具有积累性</li><li>文档工作量大</li><li>缺少反馈机制</li></ul></div><div class="tab-item-content" id="软件开发过程模型-2"><p><img src="/image/yanhuamoxin.png" alt="alt text"></p><div class="note default mordern simple"><p>演化模型提产使用两次开发来解决瀑布模型中的需求不明确问题。第一次开发为实验性开发，得到目标软件系统的实验原型产品；第二次开发为正式开发，是在实验原型产品的目标基础上开发目标产品</p></div></div><div class="tab-item-content" id="软件开发过程模型-3"><p><img src="/image/kuaisu.png" alt="alt text"></p><div class="note default mordern simple"><ul><li><p>思想：快速建立满足用户主要需求的<font color=red>原型系统</font></p></li><li><p>用户再使用后会提出一些修改建议，而程序员会快速根据建议做出新系统，再次让用户使用提出建议，反反复复，直到最终版本</p></li><li><p>优点：<br>✓可获得准确的用户需求<br>✓可靠性较高<br>✓功能及代码可再次复用</p></li><li><p>缺点：<br>➢代码质量不高<br>➢通用性不强<br>➢软件开发效率不高<br>➢文档管理不充分</p></li></ul></div></div><div class="tab-item-content" id="软件开发过程模型-4"><p><img src="/image/zengliang.png" alt="alt text"></p><ul><li>增量模型是把待开发的软件系统模块化，将每一个模块作为增量组件，从而分批次的分析，设计，编码，测试</li><li>采用增量模型不用一次性将产品交付给客户</li></ul><p><strong>增量模型最大的特点是把待开发的软件系统模块化和组件化</strong>从而产生的优点有：</p><ul><li>将待开发的软件系统模块化，可以分批次地提交软件产品，使用户可以及时了解软件项目的进展。</li><li>以组件为单位进行开发降低了软件开发的风险。一个开发周期内的错误不会影响到整个软件系统。</li><li>开发顺序灵活。开发人员可以对构件的实现顺序进行优先级排序，先完成需求稳定的核心组件。当组件的优先级发生变化时，还能及时地对实现顺序进行调整。</li></ul><div class="note warning simple"><p>它的特点也会成为它的缺点，如果软件系统不能或难以模块化，那么增量模型也就是个麻烦</p></div><div class="note simple"><p><strong>综上所述增量模型适用场景：</strong></p><ul><li>待开发软件系统能够被模块化</li><li>软件产品可以分批次交付</li><li>软件开发人员对应用领域不熟悉，难以一次性的系统性开发</li><li>项目管理人员把握水平高</li></ul></div></div><div class="tab-item-content" id="软件开发过程模型-5"><ul><li>螺旋模型是一种<font color=red>用于风险较大</font>的大型项目软件开发的过程模型，结合了快速原型模型和瀑布模型，并加入了这两者模型都忽略的<font color=red>风险分析</font>，它把开发过程分为制定计划、风险分析、实施工程和客户评估4种活动</li><li>优点是将风险分析扩展到各个阶段中，大幅度降低了软件开发的风险，但是此模型的控制和管理复杂，可操作性不高，对项目管理人员的要求过高</li></ul><p><img src="https://img-blog.csdnimg.cn/20201229170154804.png" alt="螺旋模型图"></p></div><div class="tab-item-content" id="软件开发过程模型-6"><p><img src="/image.png" alt="alt text"></p><ul><li>喷泉模型是一种过程模型，同时也支持面向对象开发。各阶段之间没有明显的界限，而且常常重复、迭代地进行。</li><li><strong>喷泉模型主要用于面向对象的软件项目。包含需求阶段、面向对象分析阶段、面向对象设计阶段、编码阶段、集成和测试阶段，以及运行状态、维护期。</strong></li><li>“喷泉”一词体现了面向对象方法的迭代和无间隙性。<ul><li>迭代是指各阶段需要多次重复，例如，分析和设计阶段常常需要多次、重复进行，以更好的实现需求。</li><li><strong>无间隙性是指各个阶段之间没有明显的界限，并常常在时间上互相交叉，并行进行。</strong></li></ul></li><li><font color=red>喷泉模型主要用于面向对象的软件项目</font>，软件的某个部分通常被重复多次，相关对象在每次迭代中随之加入渐进的软件成分。</li></ul></div><div class="tab-item-content" id="软件开发过程模型-7"><p><img src="/image/goujianzujian.png" alt="alt text"></p><div class="note simple"><p>构建组件模型是指开发人员使用一个或多个可重用的构件来构造软件系统</p><p>用户的需求已明确，那么开发团队就优先分析用户需求，从构件库中选出适当的构件再依据设计或选择的软件系统来组装到一起，高效率，高质量完成目标软件系统</p></div><div class="note success simple"><p><strong>基于组件的开发模型充分的体现了软件复用的思想，降低了开发成本和风险，并加快了产品开发</strong></p></div></div><div class="tab-item-content" id="软件开发过程模型-8"><p><img src="/image/tonyiguocheng.png" alt="统一软件开发过程（Rational Unified Process，RUP）模型是基于UML（统一建模语言）的一种面向对象软件开发模型"></p><div class="note simple"><p><strong>定义：</strong></p><ul><li>统一过程模型是一种软件开发方法，强调迭代和增量开发，分为四个阶段：需求分析、设计、实现和测试。</li><li>关键特点：<ul><li>迭代性：通过多个迭代周期逐步完善产品。</li><li>风险管理：在每个迭代中识别和管理风险。</li><li>文档：强调文档的完整性和可追溯性。</li></ul></li><li>适用场景：<ul><li>适合大型项目，需求可能变化，且需要严格的文档记录。</li></ul></li></ul></div></div><div class="tab-item-content" id="软件开发过程模型-9"><p><strong><font color=red>略…</font></strong></p></div><div class="tab-item-content" id="软件开发过程模型-10"><div class="note simple"><p><strong>定义：</strong></p><ul><li>敏捷过程是一种强调灵活性和客户参与的软件开发方法，极限编程（XP）是其一种具体实现，注重技术实践和团队协作。</li><li>关键特点：<ul><li>客户协作：与客户保持持续沟通，快速响应需求变化。</li><li>短迭代：通常每两到三周交付可工作的软件版本。</li><li>持续集成：频繁集成代码，确保软件始终处于可运行状态。</li></ul></li><li>适用场景：<ul><li>适合需求不明确或变化频繁的项目，强调快速交付和用户反馈。</li></ul></li></ul></div></div><div class="tab-item-content" id="软件开发过程模型-11"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note simple"><p><strong>2.0.3 软件开发过程模型-总结(如何选择软件模型)</strong><br><font color=red>结构化方法和面向数据结构方法可采用瀑布模型或增量模型进行软件开发；而面向对象方法可采用快速原型模型、喷泉模型</font></p></div></div><div class="tab-item-content" id="第2章-软件生命周期-2"><p><strong>在开发新的项目软件之前，软件开发团队首先需要对项目涉及的内容进行分析，围绕<font color=red>要解决的问题是什么</font>这个主题来讨论</p></div><div class="tab-item-content" id="第2章-软件生命周期-3"><div class="note simple"><p>任何工程均应进行可行性研究。<br>软件工程项目可行性研究的<font color=blue>实质</font>是一次大大压缩和简化了的分析和设计过程，主要在<font color=blue>较高层次</font>上以较抽象的方式进行，其<font color=blue>目的</font>是在尽可能短的时间内以最小的代价确定该项目<font color=orange>是否能够开发，是否值得开发</font></p></div><div class="note primary simple"><p>——<strong><font color=red>GB 8567-88《计算机软件产品开发文件编制指南》</font><br>目的：<br>用最小的代价在尽可能短的时间内确定问题是否能够解决。不是解决问题，而是确定问题是否值得去解决。<br>说明该软件开发项目的实现在技术上、经济上和社会条件上的可行性；评述为合理地达到开发目标可能选择地各种方案</strong></p></div><p><strong>可行性研究需要从多个方面进行评估</strong></p><div class="tabs" id="可行性研究的多个方面"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="可行性研究的多个方面-1"><strong>技术可行性</strong></button><button type="button" class="tab " data-href="可行性研究的多个方面-2"><strong>经济可行性</strong></button><button type="button" class="tab " data-href="可行性研究的多个方面-3"><strong>操作可行性</strong></button><button type="button" class="tab " data-href="可行性研究的多个方面-4"><strong>社会可行性</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="可行性研究的多个方面-1"><ul><li>技术可行性<ul><li>技术可行性分析是可行性分析中<font color=red>最关键</font>的内容，也即是最困难的部分。</li><li>从技术角度触发，使用现有的技术能否实现这个系统<ul><li>资源分析：所需条件和运行环境</li><li>技术分析：已有技术、开发组织拥有的技术能力</li><li>效率分析：是否能够在给定资源范围内完成目标软件系统的开发</li></ul></li></ul></li></ul><div class="note warning simple"><ul><li>还需要考虑以下问题：<br>1.全面分析项目开发过程中的技术问题<br>2.尽可能使用成熟的技术<br>3.谨慎使用先进技术</li></ul></div></div><div class="tab-item-content" id="可行性研究的多个方面-2"><ul><li><p>成本估算</p><blockquote><p>项目的成本&#x3D;购置并安装软硬件及有关设备的费用+项目开发费用+软硬件系统安装+运行和维护费用</p><ol><li>代码行技术<br>根据经验和历史数据估算源代码行数，用<font color=red>每行代码的平均成本乘以行数,确定软件的成本</font></li><li>任务分解技术<br>将项目分解为若干相对独立的任务，再分别估算每个任务单独开发的成本，最后累加起来就可得出开发项目的成本</li></ol></blockquote></li><li><p>效益预估<br><strong>直接效益+间接效益</strong></p><blockquote><ol><li>开发成本</li><li>运行费用：系统操作的费用（操作人员、工作时间和消耗物资等）以及维护费用</li><li>系统的经济效益：未使用系统而增加的收入加上使用新系统可以节省的运行费用</li></ol></blockquote></li><li><p>货币的时间价值</p></li><li><p>投资的回收期</p></li><li><p>纯收入</p></li></ul></div><div class="tab-item-content" id="可行性研究的多个方面-3"><ul><li>用户使用的可能性（是否符合用户的技术水平和使用习惯）</li><li>时间进度可行性</li><li>组织和文化上的可行性</li></ul></div><div class="tab-item-content" id="可行性研究的多个方面-4"><ul><li>在当前的法律和道德情况下，其运行方式，操作规程在用户组织或者环境内是否合理、合法、以及是否存在违规、侵权等一系列问题</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="第2章-软件生命周期-4"><ul><li>指定项目开发计划<ul><li>项目的内容范围</li><li>资源计划<ul><li>人力资源</li><li>软、硬资源</li></ul></li><li>项目开发进度规划</li></ul></li><li>项目开发计划评审</li><li>多次评审</li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-5"><div class="note simple"><p>项目设计人员通过与用户沟通，从用户的角度触发对项目需要完成的功能、性能、操作等内容进行完整、准确、具体的描述、从而进一步确定目标软件的规格和范围。<br></p><p>需求分析是软件定义期间需要完成主要任务。其成果直接决定了软件开发的后续工作，对项目的成功与否起到了决定性的影响。</p></div><p>需求分析是发现、求精、建模、规格说明和复审的过程，在宏观上是调查、分析用户面临的问题；在微观上是分析并描述用户实际需求的过程</p><ul><li><p><strong>需求的定义和组成</strong></p><div class="note success simple"><p>IEEE1997年发布的《软件工程结构标准词汇表》，软件需求的定义：<br>（1）用户解决问题或者达到目标所需的条件或能力；<br>（2）系统或系统部件为满足合同、标准、规范或其他正式文档所需具备的条件或能力；<br>（3）一种反映上述（1）和（2）两种条件或者能力的文档描述。</p></div></li><li><p>软件需求的组成包括业务需求、用户需求、功能需求和非功能需求四个层次，而非功能需求又包含外部、产品、过程需求</p><ul><li>过程需求：对目标系统的交付方式、实现技术细节和实现标准进行了约束（eg：os类型，语言、数据库等）</li><li>产品需求：对目标系统的性能，可用性、使用性、可靠性、可移植性、安全保密性、容错性等内容进行约束</li><li>外部需求：对软件产品需要遵循的法规、成本、可操作性、开发时间对内容进行约束</li></ul></li><li><p><strong>需求管理</strong></p><div class="tabs" id="需求管理"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="需求管理-1"><strong>需求获取</strong></button><button type="button" class="tab " data-href="需求管理-2"><strong>需求建模</strong></button><button type="button" class="tab " data-href="需求管理-3"><strong>需求规格说明书</strong></button><button type="button" class="tab " data-href="需求管理-4"><strong>需求评审</strong></button><button type="button" class="tab " data-href="需求管理-5"><strong>需求变更</strong></button><button type="button" class="tab " data-href="需求管理-6"><strong>需求跟踪</strong></button><button type="button" class="tab " data-href="需求管理-7"><strong>需求状态跟踪</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="需求管理-1"><p>  需求获取是指需求调研，获得清晰、准确的用户需求的过程收集并明确用户需求的过程。系统开发人员通过调查研究，要理解当前系统的工作模型、用户提出的需求一般模糊而且凌乱，这就需要开发人员能够选取较好的需求分析的方法，提炼出逻辑性强的需求。</p><p>  获取需求的方法有多种，比如<font color=red>问卷调查、访谈、实地操作、建立原型等</font></p></div><div class="tab-item-content" id="需求管理-2"><p>获取到需求后，下一步就应该对开发的系统建立分析模型了。<font color=red>模型是为了理解事物而对事物做出的一种抽象</font>,通常由一组符号和组织这些符号的规则组成。对待开发系统建立各种角度的模型有助于人们更好的理解问题，通常，从不同角度描述或理解软件系统，就需要不同的模型。常用的建模方法有数据流图、实体关系图、状态转换图、控制流图、用例图、类图、对象图等</p></div><div class="tab-item-content" id="需求管理-3"><p>需求描述就是指编制需求分析阶段的文档。一般情况下，对于复杂的软件系统，需求阶段会产生3个文档：系统定义文档（用户需求报告）、<font color=red>系统需求文档（系统需求规格说明书）</font>、软件需求文档（软件需求规格说明书）。而对于简单的软件系统而言，需求阶段只需要输出<font color=red>软件需求文档</font>就可以了</p></div><div class="tab-item-content" id="需求管理-4"><p>需求分析人员或者用户可以发现需求规格说明书中的错误或者遗漏，并根据实际情况可以对需求规格说明书进行修正。<br>确保需求的一致性、完整性、现实性、有效性。</p></div><div class="tab-item-content" id="需求管理-5"><p>软件开发团队必须有效地管理需求、减少需求变更、降低需求变更带来的风险<br>需求变更需要经过以下三个步骤:<br>1、评审<br>2、裁定<br>3、实施变更</p></div><div class="tab-item-content" id="需求管理-6"><p>建立软件项目各个需求与其它系统元素之间的依赖和逻辑联系，帮助开发团队发现需求变更的影响范围，并做出正确的变更决策</p></div><div class="tab-item-content" id="需求管理-7"><p>项目需求有多种属性，如：状态，优先级，稳定性，创建时间，创建人等。结合不同的工作情况，分为已建议，已批准，设计中，实现中，已实现，测试中，已验证。<br>可借助合适的需求管理工作来跟踪、统计项目需求的各种属性或状态，帮助了解项目的实际情况，为项目决策提供依据</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-6"><ul><li><p>软件设计的目的和任务</p><div class="note success simple"><p>软件设计的目的：依据需求分析阶段的成果，在软件设计阶段完成适合开发目标软件系统的软件体系结构、数据描述、软件组件及接口，以及软件系统组成等相关内容的设计</p><font color=orange>软件体系结构数据描述软件构件和接口软件系统组成</font></div></li><li><p>软件设计阶段</p><ul><li>概要设计：对软件系统的结构或者架构进行设计说明，用于从总体上对软件给出设计说明。</li><li>详细设计：对概要设计中规划的各项内容的进一步细化，将各个模块，以及模块之间的联系转变为精确的设计内容<div class="note success simple"><p><strong>模块化与模块独立</strong></p><ul><li><strong>模块</strong>是数据说明、可执行语句等程序对象的集合，是构成程序的基本构建，可以被单独命名并通过名字来访问。<ol><li>在面向过程的设计中，过程、函数、子程序、宏都可以作为模块；</li><li>在面向对象中，对象是模块，对象中的方法也是模块。</li></ol></li><li>模块化就是把系统或程序划分为多个独立命名并且可以独立访问的模块，每个模块完成一个特定的子功能，模块集成起来可以构成一个整体，完成特定的功能，进而满足用户需求</li><li>为了确保软件模块划分的质量，在划分模块时需要考虑模块的独立性。即开发具有功能专一，模块之间无过多相互作用的模块（模块独立性准则）。这种类型的模块可以并行开发，开发容易。</li><li>软件设计人员可以从”<font color=red>耦合性、内聚性</font>“两个角度来度量模块的独立性</li></ul></div></li></ul></li><li><p>经典软件体系结构</p><ul><li>软件体系结构定义：软件体系结构表达的时系统一个或多个结构的关系，包含以下几个部分：<ul><li>软件的组件</li><li>组件的外部可见性</li><li>组件之间的相互关系</li></ul></li><li>基本的软件体系结构风格<div class="tabs" id="软件体系结构风格"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="软件体系结构风格-1">管道/过滤器模式</button><button type="button" class="tab " data-href="软件体系结构风格-2">黑板模式</button><button type="button" class="tab " data-href="软件体系结构风格-3">分层架构</button><button type="button" class="tab " data-href="软件体系结构风格-4">客户端/服务器模式</button><button type="button" class="tab " data-href="软件体系结构风格-5">三层架构</button><button type="button" class="tab " data-href="软件体系结构风格-6">主/从模式</button><button type="button" class="tab " data-href="软件体系结构风格-7">模式/视图/控制器模式</button><button type="button" class="tab " data-href="软件体系结构风格-8">代理模式</button><button type="button" class="tab " data-href="软件体系结构风格-9">对等模式</button><button type="button" class="tab " data-href="软件体系结构风格-10">事件总线模式</button><button type="button" class="tab " data-href="软件体系结构风格-11">微核架构</button><button type="button" class="tab " data-href="软件体系结构风格-12">微服务架构</button><button type="button" class="tab " data-href="软件体系结构风格-13">云架构</button></ul><div class="tab-contents"><div class="tab-item-content active" id="软件体系结构风格-1"><p><font color=orange>管道&#x2F;过滤器模式</font><br>管道&#x2F;过滤器模式下，每个功能模块都有一组输入和输出<br>功能模块从输入集合读入数据流，并在输出集合产生输出数据流，即功能模块对输入数据进行增量计算得到输出数据流；<br>功能模块称作过滤器；功能模块之间的连接可以看作输入、输出数据流之间的通路，所以称作管道</p></div><div class="tab-item-content" id="软件体系结构风格-2"><p><font color=orange>黑板模式</font><br>该模式允许在指定的位置共享等待处理的数据，各个独立的业务处理流程可以根据需求来获取和更新数据，共同完成数据的处理<br>由黑板、知识源和控制组件三个部分组成。其中，黑板用于存储解空间对象的全局数据；知识源是一个专门用于表示知识的模块；而控制组件作为各种选择、配置和执行模块</p></div><div class="tab-item-content" id="软件体系结构风格-3"><p>分为表示层，应用层，业务逻辑，数据访问层四个层次，各层之间通过接口进行通信。</p><ul><li>表示层：负责向用户显示信息，处理用户的输入，并将数据呈现给用户。</li><li>应用层：负责处理业务逻辑，处理用户的请求，并将数据传递给业务逻辑层。</li><li>业务逻辑层：负责处理业务逻辑，处理数据，并将数据传递给数据访问层。</li><li>数据访问层：主要提供对数据存储的必要操作，例如对数据库的插入、删除和修改等</li></ul></div><div class="tab-item-content" id="软件体系结构风格-4"><p>C&#x2F;S架构，即Client&#x2F;Server架构，是典型的两层架构<br>服务器组件将为多个客户端组件提供服务，客户端从服务器请求服务，服务器为这些客户端提供相关服务<br>根据客户端完成业务功能的多少，分为瘦客户端和胖客户端</p></div><div class="tab-item-content" id="软件体系结构风格-5"><p>在客户端&#x2F;服务器模式的基础上，将整个业务应用划分为表示层、业务层和数据层三部分<br>同分层结构</p></div><div class="tab-item-content" id="软件体系结构风格-6"><p>主要用于冗余备份及负载均衡。在正常情况下，主设备优先向客户端提供服务，从设备侦听主设备的工作状态；当主设备失效时，从设备及时接替主设备，保证软件系统提供的服务不会因为主设备的故障而中断</p></div><div class="tab-item-content" id="软件体系结构风格-7"><p>MVC(Model-View-Controller)模式，分为模式(Model),视图(View),控制器(Controller)<br>模式就是在Mvc组合中用来存储数据的元素<br>视图是用户界面可视化部分<br>控制器是用来处理用户输入，并将数据传递给模型的部分</p></div><div class="tab-item-content" id="软件体系结构风格-8"><p>为其它对象提供一种代理以控制对这个对象的访问。代理对象在客户端和目标对象之间起到中介的作用，并可以在不改变客户端代码的情况下增强或控制对象的访问。</p></div><div class="tab-item-content" id="软件体系结构风格-9"><p>去掉了中心化的服务器角色，每个节点(Peer)既是服务的提供者，也是服务的消费者，这种模式强调网络中各节点的平等性，每个节点都可以直接与其他节点通信和交换数据</p></div><div class="tab-item-content" id="软件体系结构风格-10"><p>应用于事件处理，主要由四个组件构成：事件源(event source)、事件侦听者(event listener)、通道(channel)以及总线(bus).<br>事件源将消息发布到总线的特定通道，侦听者订阅相应的通道、事件源所发布的消息通过通道给订阅通道的侦听者</p></div><div class="tab-item-content" id="软件体系结构风格-11"><p>又叫“插件架构”,指的是软件内核较小，主要功能和业务逻辑都有插件完成<br><font color=orange>内核</font>：通常只包含系统运行的最小功能，插件则是相互独立的，插件之间的通信，应该减少到最低，避免出现相互依赖的问题（低耦合）</p></div><div class="tab-item-content" id="软件体系结构风格-12"><p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。<br>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系</p></div><div class="tab-item-content" id="软件体系结构风格-13"><p>  主要解决扩展性和并发的问题，是最容易扩展的架构<br>  主要分成两部分：处理单元和虚拟中间件</p><ul><li>处理单元：实现业务逻辑</li><li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul></li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-7"><ul><li><p>软件实现：利用程序设计语言，将详细设计的内容转换为软件系统，并对完成的软件系统进行质量保障的过程</p></li><li><p>程序设计语言的选择：进行软件开发时，应该根据待开发软件的特征及开发团队的情况使用合适的编程语言。因为不同的编程语言有各自不同的特点，有些时候，软件开发人员在选择时经常感到很矛盾，这时，软件开发人员从主要问题入手，对各个因素进行平衡</p><div class="note simple"><p><font color=orange>选择编程语言时可考虑如下因素：</font><br>（1）系统用户的要求<br>（2）可使用的编译程序<br>（3）可以得到的软件工具<br>（4）工程的规模和复杂程度<br>（5）软件的应用领域<br>（6）软件的可移植性要求<br>（7）程序员的知识</p></div></li><li><p>软件编码规范</p><div class="note simple"><p>软件编码规范是指软件开发团队或者开发组织为了规范软件开发人员的编码风格和编程习惯所定义的软件代码编写规范<br>(1)空行<br>(2)空格<br>(3)排版规范<br>(4)代码注释<br>(5)代码行：需简单、清晰、直接<br>(6)括号的合理使用<br>(7)标识符命名与定义<br>(8)目录结构及文件命名规范</p></div></li><li><p>软件效率</p><div class="note simple"><ul><li>选择合适的数据结构</li><li>选择优化的算法</li><li>提高存储效率</li><li>优化输入&#x2F;输出效率</li><li>提高程序运行效率</li></ul></div></li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-8"><ul><li>软件测试是在规定的条件下对程序进行操作，亦发现错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程</li><li>软件测试的技术<div class="note simple"><p><font color=orange>白盒测试</font>：，又称结构测试，也称为基于代码的测试或者逻辑驱动测试。白盒测试在软件结构或者程序代码已知的情况下，利用程序内部的逻辑结构及相关信息来设计或选择测试用例，检验程序是否按照规定正常运行的测试过程。<br><font color=orange>黑盒测试</font>：黑盒测试，又称功能测试，也称基于规格说明的测试或数据驱动测试。黑盒测试主要根据软件的需求规格说明和软件使用说明来设计或选择测试用例，并测试程序实现的功能是否与规格说明书相符。<br><font color=orange>性能测试</font>：指测试人员利用特定的测试工具或者开发的测试软件，依据软件需求规格说明书中的非功能性需求和约束条件，对目标软件不断施加压力的负荷测试过程。因此，性能测试，也称为压力测试、强度测试和负载测试。</p></div></li><li>软件测试策略<div class="note simple"><table><thead><tr><th>测试阶段</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>单元测试</td><td>输入被测模块</td><td>输出已经测试模块</td></tr><tr><td>集成测试</td><td>输入已经测试模块+设计信息</td><td>输入已集成的软件</td></tr><tr><td>确认测试</td><td>输入已集成的软件+软件需求</td><td>输出已确认的软件</td></tr><tr><td>系统测试</td><td>输入已确认的软件+系统其它元素</td><td>输出可交付软件</td></tr></tbody></table></div></li><li>软件调试<ul><li>蛮干法</li><li>回溯法</li><li>原因排除法</li></ul></li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-9"><ul><li>软件维护指在软件产品交付使用后，软件维护人员对软件进行修改，纠正软件错误、改进软件性能和属性，使产品能够适应环境的过程</li><li>软件维护类型<br>(1) 纠错型维护<br>(2) 适应型维护<br>(3) 完善型维护<br>(4) 预防型维护</li><li>软件维护的实施<br><img src="/image/SoftwareMaintenance.png" alt="实施过程"></li><li>软件维护团队<br><img src="/image/MaintenanceTeam.png" alt="维护团队组成"></li></ul></div><div class="tab-item-content" id="第2章-软件生命周期-10"><p><font color=red>软件生命周期</font></p><div class="note simple"><p><font color=orange>软件生命周期是软件工程中的核心概念</font>，它不仅描述了软件从构思到退役的整个过程，更反映了软件开发的哲学和方法论。通过深入理解软件生命周期，我们可以更好地把握软件开发的本质，提高开发效率，并确保软件质量。<br><em>生命周期的本质与意义</em><br>软件生命周期本质上是一个问题解决和价值创造的过程。它始于对现实问题的认知，经过系统性的分析、设计和实现，最终交付一个能够解决问题、创造价值的软件产品。这个过程不仅仅是技术的堆砌，更是智慧的结晶和创新的体现。<br>生命周期模型的多样性反映了软件开发的复杂性和灵活性。从传统的瀑布模型到现代的敏捷方法，每种模型都有其特定的应用场景和优势。选择合适的生命周期模型，实际上是在项目管理、风险控制、客户满意度之间寻找最佳平衡点。</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="第三章-结构化分析"><a href="#第三章-结构化分析" class="headerlink" title="第三章 结构化分析"></a>第三章 结构化分析</h2><div class="note simple"><p>一个有用的软件需要思考 <font color=red>3W</font></p><ul><li>Who 为谁设计，用户是谁？</li><li>What 要解决哪些问题？</li><li>Why 为什么要解决这些问题？ <br/></li></ul><p>为了开发出真正满足用户需求的软件产品，明确地了解用户需求是关键，虽然在可行性研究中，已经对用户需求有了初步的了解，但是很多的细节还没有考虑到<br>可行性研究的目的是评估系统是否值得去开发，问题是否能够解决，而不是对需求进行定义，如果说<font color=red>可行性分析</font>是去解决<font color=red>做还是不做</font>,那么<font color=red>需求分析</font>就是回答”<font color=red>系统必须做什么</font>,这个问题</p><p>总体：结构化方法学</p><ul><li>结构化分析</li><li>结构化设计</li><li>结构化编程</li></ul></div><div class="tabs" id="结构化分析"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="结构化分析-1"><strong>结构化需求描述方法</strong></button><button type="button" class="tab " data-href="结构化分析-2"><strong>结构化需求建模</strong></button><button type="button" class="tab " data-href="结构化分析-3"><strong>画分层DFD的基本原则</strong></button><button type="button" class="tab " data-href="结构化分析-4"><strong>分层DFD图的改进</strong></button></ul><div class="tab-contents"><div class="tab-item-content active" id="结构化分析-1"><p>在结构化需求分析中，需要关心的主要问题是什么呢？<br>是要对系统的功能、性能、可靠性、可维护性、成本、风险、兼容性、可移植性、可扩展性、可测试性等方面进行分析，还是要对系统的结构、模块、接口、数据、流程等方面进行分析？</p><ol><li>需求分析<div class="note simple"><p>在结构化需求描述过程中，需求分析人员必须关注系统内部数据的处理过程，即数据从输入到输出的过程中经过了哪些<font color=red>处理</font>以及处理的对象是什么，对象的内容是什么,<br>而处理的一般动作是采用<font colore=orange>动词短语</font></p><ul><li>首先从需求描述中挑选出所有的动词+宾语 和 动词</li><li>其次，对选取的动词短语进行分析，去除所有与本项目无关的动词</li><li>最后，对剩余的动词短语进行过程排序</li></ul><p>在撰写需求内容时，需求分析人员还需要对动词处理的对象“宾语”，即各个数据项目的内容组成和内容格式进行详细描述</p><p>软件需求规格说明书是需求分析阶段的输出，它全面、清晰地描述了用户需求，因此是开发人员进行后续软件设计的重要依据</p></div></li></ol></div><div class="tab-item-content" id="结构化分析-2"><ul><li>获取到需求后，下一步就应该对开发的系统<font color=red>建立分析模型</font>，模型是为了理解事物而对事物做出的一种抽象，通常由一组符号和组织这些符号的规则组成。对待开发系统建立各种角度的模型有助于人们更好地理解问题</li><li>结构化需求建模时，可以使用数据流图、数据模型、数据字典、处理&#x2F;加工逻辑说明和状态转换图等</li><li>数据流图<div class="note simple"><p><img src="/image/DFD.png" alt="数据流图符号"></p><ol><li>外部实体：表示数据的源点或终点，它是系统之外的实体，可以是人、物或者其它系统</li><li>数据流：表示数据流的流动方向。【数据流可以从加工流向加工，从加工流向文件，从文件流向加工】</li><li>处理：表示对数据进行加工或处理（数据变换），比如对数据的算法分析和科学计算</li><li>数据存储：表示输入或输出文件。【这些文件可以是计算机系统中的外部或内部文件，也可以是表、账单等】</li></ol></div></li></ul><div class="note warning simple"><ol><li>数据流的源头或终点，至少需要一个处理过程</li><li>数据流必须标出名字，且名字必须反应出数据流中的数据内容</li><li>数据流的名字不允许重复</li><li>数据流描述的是被处理的数据，不应该体现具体的处理控制内容</li></ol></div><div class="note success simple"><p><img src="/image/DFD1.png" alt="数据流与处理之间的关系"></p><p><img src="/image/DFD2.png" alt="数据流图分层"></p></div><p>根据结构化需求分析采用的<font color=red>自顶向下，由外道内，逐层分解</font>的思想，开发人员要先画出系统顶层的数据流图，然后再逐层画出低层的数据流图。<br>顶层的数据流图要定义系统范围，并描述系统与外界的数据联系，它是对系统架构的高度概括和抽象，底层的数据流图是对系统某个部分的精细描述。</p><ul><li>数据流图的分层思想体现了需求建模的<font color=red>抽象和信息隐藏</font>，即上层处理时不需要考虑下层处理的细节，暂时掩盖了下层处理的功能和处理之间的复杂关系</li><li>数据流图是一个逐步求精的过程，其主要遵守的原则：<div class="note simple"><ol><li>第0层的数据流图应该将软件描述为一个处理</li><li>主要的输入和输出应该仔细标记</li><li>通过分离再下一层表示的候选处理过程、数据对象和数据存储，开始求精过程</li><li>应使用有意义的名称标记所有的箭头和处理</li><li>应当一个层转移到另一个层时要保持信息流的连续性</li><li>一次精化一个处理</li></ol></div></li></ul></div><div class="tab-item-content" id="结构化分析-3"><ul><li><font color=red>数据守恒与数据封闭原则</font><div class="note simple"><p>数据守恒是指加工的输入&#x2F;输出数据流是否匹配，即每一个加工既有输入数据流又有输出数据流。<br>数据封闭是对整个系统而言</p></div></li><li><font color=red>加工分解原则</font><div class="note simple"><p>自然性：概念上合理、清晰<br>均匀性：理想的分解是将每一个问题分解成大小均匀的几个部分<br>分解度：一般每一个加工每次分解最多不要超过7个子加工，分解应分解到基本加工为止</p></div></li><li><font color=red>子图与父图的平衡</font><div class="note simple"><p>父图中某个加工的输入&#x2F;输出数据流应该同相应子图的输入&#x2F;输出相同，分层数据流图的这种特点称为子图与父图的平衡</p></div></li><li><font color=red>合理使用文件</font><div class="note simple"><p>当文件作为某些加工之间的交互界面时，文件必须画出来，一旦文件作为数据流图中的一个独立成分画出来了，那么它同其它成分之间的联系也应同时表达出来</p></div></li></ul><div class="note warning simple"><p>数据流图DFD不是流程图，不表示软件的控制流程</p></div></div><div class="tab-item-content" id="结构化分析-4"><p>DFD图必须经过反复修改，才能获得最终的目标系统的DFD图，可从以下方面改进DFD图:</p><ol><li><p>检查数据流的正确性</p><ol><li>数据守恒</li><li>子图、父图的平衡</li><li>文件使用是否合理。特别注意输入&#x2F;输出文件的数据流</li></ol></li><li><p>改进DFD图的易理解性</p><ol><li>简化加工之间的联系（联系越少，独立性越强，易理解性越好）</li><li>改进分解的均匀性</li><li>适当命名（各成分名称无二义性，准确，具体）</li></ol></li><li><p>处理&#x2F;加工逻辑说明</p><ol><li>结构化语言<ol><li>外层语法：外层语法描述操作的控制结构，如，顺序，判定，循环等</li><li>内层语法：内层语法一般采用自然语言来表述具体的处理逻辑 </li><li><img src="/image/DFD3.png" alt="eg"></li></ol></li><li>判定树 eg:<img src="/image/DFD4.png" alt="eg2"></li><li>判定表是一种二维的表格，常用于较复杂的组合条件的处理，通常由四部分组成<ol><li>条件框 – 条件定义</li><li>操作框 – 操作的定义</li><li>条件条目 – 各条件的取值及组合</li><li>操作条目 – 再各条件取值组合下所执行的操作</li><li>EG:<img src="/image/DFD5.png" alt="eg3"></li></ol></li></ol></li><li><p>状态转换图</p><div class="note simple"><p>状态转换图：描述系统对内部或者外部事件响应的行为模型，它描述了系统的各种行为模式（称为“状态”），以及系统在外部事件作用下的状态转换<br>(1) 状态：软件在运行过程中的不同运行阶段，或者任何可以被观察到的系统行为<br><img src="/image/DFD6.png" alt="三态"></p><blockquote><p>在中间状态中经常使用输入(entry)、执行(do)、和退出(exit)三种标准事件</p></blockquote><p>(2) 事件：事件是对引起系统动作或系统状态改变的外部动作的抽象<br><img src="/image/DFD7.png" alt="事件"></p><p>补充：复合状态中嵌套了两个或者两个以上的子状态，可以用于表示系统的宏观状态；子状态用于对系统微观状态的建模</p></div></li><li><p>数据模型</p><div class="note simple"><ul><li>数据的结构<br>在结构化程序设计中，处理可以理解为完成具体功能的函数。而输入、输出处理的数据流即对应着函数的输入形参和输出结果。在函数的输入、输出中，除了简单的原子型数据以外，在涉及数据处理、数据存储或者数据输出等软件功能时，往往存在特定的数据结构，如结构型数据、文等。</li><li>数据之间的关系<br>所谓数据之间的关系，即数据之间的联系，是指某一类数据与另外一类数据的对应关系。<br>一般是1对1（1:1）、1对多（1:N）和多对多（M:N）。</li><li>数据项的组成<br>在需求分析中，数据项的内容描述被称为数据字典。<br>数据项的内容组成方式有顺序、选择、重复和可选四种方式。<br>EG:<img src="/image/DFD8.png" alt="alt text"></li></ul></div></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/07/12/2024-7-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/07/12/2024-7-12-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="个人博客网页部署成功"><a href="#个人博客网页部署成功" class="headerlink" title="个人博客网页部署成功"></a>个人博客网页部署成功</h2><h3 id="第一篇文章："><a href="#第一篇文章：" class="headerlink" title="第一篇文章："></a>第一篇文章：</h3><blockquote><h4 id="必须做的的事如下"><a href="#必须做的的事如下" class="headerlink" title="必须做的的事如下"></a>必须做的的事如下</h4><p>-–<br>title: 第一篇文章<br>date: 2024-7-12 11:17:00<br>updated: 2024-7-12 11:17:00<br>-–</p><h4 id="hexo靠上面的头部信息来判断这是一篇文章"><a href="#hexo靠上面的头部信息来判断这是一篇文章" class="headerlink" title="hexo靠上面的头部信息来判断这是一篇文章"></a>hexo靠上面的头部信息来判断这是一篇文章</h4></blockquote><h2 id="粘贴一段代码测试一下"><a href="#粘贴一段代码测试一下" class="headerlink" title="粘贴一段代码测试一下"></a>粘贴一段代码测试一下</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_TIMER 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRMAXLEN 25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRMINLEN 8</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span> <span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagCharChain</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tagCharChain</span> *prev;</span><br><span class="line">    TCHAR ch;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tagCharChain</span> *next;</span><br><span class="line">&#125;CharChain,*pCharChain;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagCharColumn</span> </span><br><span class="line">&#123;</span><br><span class="line">    CharChain *head,*current,*point; </span><br><span class="line">    <span class="type">int</span> x,y,iStrLen;</span><br><span class="line">    <span class="type">int</span> iStopTimes,iMustStopTimes;</span><br><span class="line">&#125;CharColumn, *pCharColumn;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,PSTR szCmdLine,<span class="type">int</span> iCmdShow)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> TCHAR szAppName[]=<span class="built_in">TEXT</span>(<span class="string">&quot;matrix&quot;</span>);</span><br><span class="line">    HWND hwnd;</span><br><span class="line">MSG msg;</span><br><span class="line">WNDCLASS wndclass;</span><br><span class="line">    wndclass.style=CS_HREDRAW|CS_VREDRAW;</span><br><span class="line">    wndclass.lpfnWndProc=WndProc;</span><br><span class="line">    wndclass.cbClsExtra=<span class="number">0</span>;</span><br><span class="line">    wndclass.cbWndExtra=<span class="number">0</span>;</span><br><span class="line">    wndclass.hInstance=hInstance;</span><br><span class="line">    wndclass.hIcon=<span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>,IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor=<span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>,IDC_ARROW);</span><br><span class="line">    wndclass.hbrBackground=(HBRUSH)<span class="built_in">GetStockObject</span>(BLACK_BRUSH);</span><br><span class="line">wndclass.lpszMenuName=<span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName=szAppName;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">RegisterClass</span>(&amp;wndclass)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>,<span class="built_in">TEXT</span>(<span class="string">&quot;此程序必须运行在NT下!&quot;</span>),szAppName,MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    hwnd=<span class="built_in">CreateWindow</span>(szAppName,<span class="literal">NULL</span>,WS_DLGFRAME|WS_THICKFRAME|WS_POPUP,<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">GetSystemMetrics</span>(SM_CXSCREEN),<span class="built_in">GetSystemMetrics</span>(SM_CYSCREEN),<span class="literal">NULL</span>,<span class="literal">NULL</span>,hInstance,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd,SW_SHOWMAXIMIZED);</span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line">    <span class="built_in">ShowCursor</span>(FALSE);</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">int</span>)<span class="built_in">GetCurrentTime</span>());</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">GetMessage</span>(&amp;msg,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">ShowCursor</span>(TRUE);</span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TCHAR <span class="title">randomChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (TCHAR)(<span class="built_in">rand</span>()%<span class="number">93</span><span class="number">+33</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(CharColumn *cc,<span class="type">int</span> cyScreen,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    cc-&gt;iStrLen=<span class="built_in">rand</span>()%(STRMAXLEN-STRMINLEN)+STRMINLEN;</span><br><span class="line">    cc-&gt;x=x<span class="number">+3</span>;</span><br><span class="line">cc-&gt;y=<span class="built_in">rand</span>()%<span class="number">3</span>?<span class="built_in">rand</span>()%cyScreen:<span class="number">0</span>;</span><br><span class="line">    cc-&gt;iMustStopTimes=<span class="built_in">rand</span>()%<span class="number">6</span>;</span><br><span class="line">cc-&gt;iStopTimes=<span class="number">0</span>;</span><br><span class="line">cc-&gt;head=cc-&gt;current=(pCharChain)<span class="built_in">calloc</span>(cc-&gt;iStrLen,<span class="built_in">sizeof</span>(CharChain));</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;cc-&gt;iStrLen<span class="number">-1</span>;j++) </span><br><span class="line">    &#123;</span><br><span class="line">cc-&gt;current-&gt;prev=cc-&gt;point;</span><br><span class="line">        cc-&gt;current-&gt;ch=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">cc-&gt;current-&gt;next=cc-&gt;current<span class="number">+1</span>;</span><br><span class="line">cc-&gt;point=cc-&gt;current++;</span><br><span class="line">    &#125;</span><br><span class="line">    cc-&gt;current-&gt;prev=cc-&gt;point;</span><br><span class="line">    cc-&gt;current-&gt;ch=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    cc-&gt;current-&gt;next=cc-&gt;head;</span><br><span class="line">    cc-&gt;head-&gt;prev=cc-&gt;current;</span><br><span class="line">    cc-&gt;current=cc-&gt;point=cc-&gt;head;</span><br><span class="line">    cc-&gt;head-&gt;ch=<span class="built_in">randomChar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd,UINT message,WPARAM wParam,LPARAM lParam)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hdc;</span><br><span class="line">    <span class="type">int</span> i,j,temp,ctn;</span><br><span class="line">    <span class="type">static</span> HDC hdcMem; </span><br><span class="line">    HFONT hFont;</span><br><span class="line">    <span class="type">static</span> HBITMAP hBitmap;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> cxScreen,cyScreen;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> iFontWidth=<span class="number">10</span>,iFontHeight=<span class="number">15</span>,iColumnCount;</span><br><span class="line">    <span class="type">static</span> CharColumn *ccChain; </span><br><span class="line">    <span class="keyword">switch</span> (message) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_CREATE: </span><br><span class="line">            cxScreen=<span class="built_in">GetSystemMetrics</span>(SM_CXSCREEN);</span><br><span class="line">            cyScreen=<span class="built_in">GetSystemMetrics</span>(SM_CYSCREEN);</span><br><span class="line">            <span class="built_in">SetTimer</span>(hwnd,ID_TIMER,<span class="number">10</span>,<span class="literal">NULL</span>);</span><br><span class="line">            hdc=<span class="built_in">GetDC</span>(hwnd);</span><br><span class="line">        hdcMem=<span class="built_in">CreateCompatibleDC</span>(hdc);</span><br><span class="line">            hBitmap=<span class="built_in">CreateCompatibleBitmap</span>(hdc,cxScreen,cyScreen);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hdcMem,hBitmap);</span><br><span class="line">            <span class="built_in">ReleaseDC</span>(hwnd,hdc);</span><br><span class="line">        hFont=<span class="built_in">CreateFont</span>(iFontHeight,iFontWidth<span class="number">-5</span>,<span class="number">0</span>,<span class="number">0</span>,FW_BOLD,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,DEFAULT_CHARSET,OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,DRAFT_QUALITY,FIXED_PITCH|FF_SWISS,<span class="built_in">TEXT</span>(<span class="string">&quot;Fixedsys&quot;</span>));</span><br><span class="line">            <span class="built_in">SelectObject</span>(hdcMem,hFont);</span><br><span class="line">            <span class="built_in">DeleteObject</span>(hFont);</span><br><span class="line">            <span class="built_in">SetBkMode</span>(hdcMem,TRANSPARENT);</span><br><span class="line">            iColumnCount=cxScreen/(iFontWidth*<span class="number">3</span>/<span class="number">2</span>);</span><br><span class="line">            ccChain=(pCharColumn)<span class="built_in">calloc</span>(iColumnCount,<span class="built_in">sizeof</span>(CharColumn));</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;iColumnCount;i++)<span class="built_in">init</span>(ccChain+i,cyScreen,(iFontWidth*<span class="number">3</span>/<span class="number">2</span>)*i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> WM_TIMER:</span><br><span class="line">            hdc=<span class="built_in">GetDC</span>(hwnd);</span><br><span class="line">            <span class="built_in">PatBlt</span>(hdcMem,<span class="number">0</span>,<span class="number">0</span>,cxScreen,cyScreen,BLACKNESS);</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;iColumnCount;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ctn=(ccChain+i)-&gt;iStopTimes++&gt;(ccChain+i)-&gt;iMustStopTimes;</span><br><span class="line">                (ccChain+i)-&gt;point=(ccChain+i)-&gt;head;</span><br><span class="line">                <span class="built_in">SetTextColor</span>(hdcMem,<span class="built_in">RGB</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>));</span><br><span class="line">                <span class="built_in">TextOut</span>(hdcMem,(ccChain+i)-&gt;x,(ccChain+i)-&gt;y,&amp;((ccChain+i)-&gt;point-&gt;ch),<span class="number">1</span>);</span><br><span class="line">                j=(ccChain+i)-&gt;y;</span><br><span class="line">                (ccChain+i)-&gt;point=(ccChain+i)-&gt;point-&gt;next;</span><br><span class="line">                temp=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>((ccChain+i)-&gt;point!=(ccChain+i)-&gt;head&amp;&amp;(ccChain+i)-&gt;point-&gt;ch)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="built_in">SetTextColor</span>(hdcMem,<span class="built_in">RGB</span>(<span class="number">0</span>,<span class="number">255</span>-(<span class="number">255</span>*(temp++)/(ccChain+i)-&gt;iStrLen),<span class="number">0</span>));</span><br><span class="line">                    <span class="built_in">TextOut</span>(hdcMem,(ccChain+i)-&gt;x,j-=iFontHeight,&amp;((ccChain+i)-&gt;point-&gt;ch),<span class="number">1</span>);</span><br><span class="line">                    (ccChain+i)-&gt;point=(ccChain+i)-&gt;point-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">if</span>(ctn)(ccChain+i)-&gt;iStopTimes=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">                (ccChain+i)-&gt;y+=iFontHeight;</span><br><span class="line">                <span class="keyword">if</span>((ccChain+i)-&gt;y-(ccChain+i)-&gt;iStrLen*iFontHeight&gt;cyScreen)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="built_in">free</span>((ccChain+i)-&gt;current);</span><br><span class="line">                    <span class="built_in">init</span>(ccChain+i,cyScreen,(iFontWidth*<span class="number">3</span>/<span class="number">2</span>)*i);</span><br><span class="line">                &#125;</span><br><span class="line">                (ccChain+i)-&gt;head=(ccChain+i)-&gt;head-&gt;prev;</span><br><span class="line">                (ccChain+i)-&gt;head-&gt;ch=<span class="built_in">randomChar</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">BitBlt</span>(hdc,<span class="number">0</span>,<span class="number">0</span>,cxScreen,cyScreen,hdcMem,<span class="number">0</span>,<span class="number">0</span>,SRCCOPY);</span><br><span class="line">            <span class="built_in">ReleaseDC</span>(hwnd,hdc);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line">            <span class="built_in">KillTimer</span>(hwnd,ID_TIMER);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> WM_RBUTTONUP:</span><br><span class="line">            <span class="built_in">SetTimer</span>(hwnd,ID_TIMER,<span class="number">10</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> WM_KEYDOWN:<span class="keyword">case</span> WM_LBUTTONDOWN:<span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">            <span class="built_in">KillTimer</span>(hwnd,ID_TIMER);</span><br><span class="line">            <span class="built_in">DeleteObject</span>(hBitmap);</span><br><span class="line">            <span class="built_in">DeleteDC</span>(hdcMem);</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;iColumnCount;i++)<span class="built_in">free</span>((ccChain+i)-&gt;current);</span><br><span class="line">            <span class="built_in">free</span>(ccChain);</span><br><span class="line">            <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd,message,wParam,lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hexo配置效果测试"><a href="#hexo配置效果测试" class="headerlink" title="hexo配置效果测试"></a>hexo配置效果测试</h2><h3 id="分割线改变"><a href="#分割线改变" class="headerlink" title="分割线改变"></a>分割线改变</h3><hr><p><del>如上</del></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友联</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
